
G070_LowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e18  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002f64  08002f64  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002f64  08002f64  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00003f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f68  08002f68  00003f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f6c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002f78  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002f78  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099c3  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c7  00000000  00000000  0000d9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000834  00000000  00000000  0000fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014879  00000000  00000000  00010694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b38d  00000000  00000000  00024f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e18  00000000  00000000  0003029a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b50b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000b50f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b76c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002eb8 	.word	0x08002eb8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002eb8 	.word	0x08002eb8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2f      	ldr	r2, [pc, #188]	@ (80002e4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d157      	bne.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
	{
		HAL_TIM_Base_Stop(&htim6);
 800022a:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fc45 	bl	8001abc <HAL_TIM_Base_Stop>
	    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET)
 8000232:	2380      	movs	r3, #128	@ 0x80
 8000234:	019b      	lsls	r3, r3, #6
 8000236:	4a2d      	ldr	r2, [pc, #180]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000238:	0019      	movs	r1, r3
 800023a:	0010      	movs	r0, r2
 800023c:	f000 fe32 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d149      	bne.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
		{

			switch(mode)
 8000246:	4b2a      	ldr	r3, [pc, #168]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b03      	cmp	r3, #3
 800024c:	d033      	beq.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
 800024e:	dc44      	bgt.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
 8000250:	2b02      	cmp	r3, #2
 8000252:	d01f      	beq.n	8000294 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000254:	dc41      	bgt.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
 8000256:	2b00      	cmp	r3, #0
 8000258:	d002      	beq.n	8000260 <HAL_TIM_PeriodElapsedCallback+0x48>
 800025a:	2b01      	cmp	r3, #1
 800025c:	d009      	beq.n	8000272 <HAL_TIM_PeriodElapsedCallback+0x5a>
				mode =0;

			}
		}
	}
}
 800025e:	e03c      	b.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000260:	4b24      	ldr	r3, [pc, #144]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000262:	2100      	movs	r1, #0
 8000264:	0018      	movs	r0, r3
 8000266:	f001 fd05 	bl	8001c74 <HAL_TIM_PWM_Start>
				mode= 1;
 800026a:	4b21      	ldr	r3, [pc, #132]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
				break;
 8000270:	e033      	b.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 8000272:	4b20      	ldr	r3, [pc, #128]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a20      	ldr	r2, [pc, #128]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000278:	62da      	str	r2, [r3, #44]	@ 0x2c
 800027a:	4b1e      	ldr	r3, [pc, #120]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800027c:	4a1e      	ldr	r2, [pc, #120]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800027e:	60da      	str	r2, [r3, #12]
				TIM3->EGR |= TIM_EGR_UG;  // Triggering UPDATE EVENT
 8000280:	4b1e      	ldr	r3, [pc, #120]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000286:	2101      	movs	r1, #1
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
				mode =2;
 800028c:	4b18      	ldr	r3, [pc, #96]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800028e:	2202      	movs	r2, #2
 8000290:	701a      	strb	r2, [r3, #0]
				break;
 8000292:	e022      	b.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 1999);
 8000294:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800029a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800029c:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800029e:	4a18      	ldr	r2, [pc, #96]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002a0:	60da      	str	r2, [r3, #12]
				TIM3->EGR |= TIM_EGR_UG;  // Triggering UPDATE EVENT
 80002a2:	4b16      	ldr	r3, [pc, #88]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80002a4:	695a      	ldr	r2, [r3, #20]
 80002a6:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80002a8:	2101      	movs	r1, #1
 80002aa:	430a      	orrs	r2, r1
 80002ac:	615a      	str	r2, [r3, #20]
				mode = 3;
 80002ae:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002b0:	2203      	movs	r2, #3
 80002b2:	701a      	strb	r2, [r3, #0]
				break;
 80002b4:	e011      	b.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 499);
 80002b6:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	22f4      	movs	r2, #244	@ 0xf4
 80002bc:	32ff      	adds	r2, #255	@ 0xff
 80002be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002c2:	22f4      	movs	r2, #244	@ 0xf4
 80002c4:	32ff      	adds	r2, #255	@ 0xff
 80002c6:	60da      	str	r2, [r3, #12]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fdb5 	bl	8001e3c <HAL_TIM_PWM_Stop>
				mode =0;
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
}
 80002d8:	e7ff      	b.n	80002da <HAL_TIM_PeriodElapsedCallback+0xc2>
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	40001000 	.word	0x40001000
 80002e8:	20000074 	.word	0x20000074
 80002ec:	50000800 	.word	0x50000800
 80002f0:	200000c0 	.word	0x200000c0
 80002f4:	20000028 	.word	0x20000028
 80002f8:	000003e7 	.word	0x000003e7
 80002fc:	40000400 	.word	0x40000400
 8000300:	000007cf 	.word	0x000007cf

08000304 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	0002      	movs	r2, r0
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_13)
 8000310:	1dbb      	adds	r3, r7, #6
 8000312:	881a      	ldrh	r2, [r3, #0]
 8000314:	2380      	movs	r3, #128	@ 0x80
 8000316:	019b      	lsls	r3, r3, #6
 8000318:	429a      	cmp	r2, r3
 800031a:	d103      	bne.n	8000324 <HAL_GPIO_EXTI_Rising_Callback+0x20>
	{
		//Start TIM 6 for Debouncing
		HAL_TIM_Base_Start_IT(&htim6);
 800031c:	4b03      	ldr	r3, [pc, #12]	@ (800032c <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fbf2 	bl	8001b08 <HAL_TIM_Base_Start_IT>
	}
}
 8000324:	46c0      	nop			@ (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b002      	add	sp, #8
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000074 	.word	0x20000074

08000330 <LOW_POWER_CLK_CONFIG>:
void LOW_POWER_CLK_CONFIG(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b09f      	sub	sp, #124	@ 0x7c
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_LSI_init_Struct = {0};
 8000336:	2444      	movs	r4, #68	@ 0x44
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	2334      	movs	r3, #52	@ 0x34
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f002 fd8d 	bl	8002e60 <memset>
  RCC_OscInitTypeDef RCC_HSI_delete_Struct = {0};
 8000346:	2310      	movs	r3, #16
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2334      	movs	r3, #52	@ 0x34
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f002 fd85 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	2310      	movs	r3, #16
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f002 fd7e 	bl	8002e60 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000364:	2380      	movs	r3, #128	@ 0x80
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fe31 	bl	8000fd0 <HAL_PWREx_ControlVoltageScaling>

   // Configure the LSI oscillator
  RCC_LSI_init_Struct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 800036e:	193b      	adds	r3, r7, r4
 8000370:	2208      	movs	r2, #8
 8000372:	601a      	str	r2, [r3, #0]
  RCC_LSI_init_Struct.LSIState = RCC_LSI_ON;  // Enable LSI
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2201      	movs	r2, #1
 8000378:	619a      	str	r2, [r3, #24]
  RCC_LSI_init_Struct.PLL.PLLState = RCC_PLL_NONE;  // No PLL configuration
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]

  if (HAL_RCC_OscConfig(&RCC_LSI_init_Struct) != HAL_OK)
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fea8 	bl	80010d8 <HAL_RCC_OscConfig>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d003      	beq.n	8000394 <LOW_POWER_CLK_CONFIG+0x64>
  {
	  Error_Handler();
 800038c:	f000 f9b4 	bl	80006f8 <Error_Handler>
  }

  // Wait until LSI is ready
  while (!(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY)))
 8000390:	e000      	b.n	8000394 <LOW_POWER_CLK_CONFIG+0x64>
  {
      __NOP();  // Wait for LSI to stabilize
 8000392:	46c0      	nop			@ (mov r8, r8)
  while (!(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY)))
 8000394:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <LOW_POWER_CLK_CONFIG+0xdc>)
 8000396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000398:	2202      	movs	r2, #2
 800039a:	4013      	ands	r3, r2
 800039c:	d0f9      	beq.n	8000392 <LOW_POWER_CLK_CONFIG+0x62>
  }

  //Configue LSI as SYSCLK
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800039e:	003b      	movs	r3, r7
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_LSI;
 80003a4:	003b      	movs	r3, r7
 80003a6:	2203      	movs	r2, #3
 80003a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	003b      	movs	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	003b      	movs	r3, r7
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80003b6:	003b      	movs	r3, r7
 80003b8:	2100      	movs	r1, #0
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 f99c 	bl	80016f8 <HAL_RCC_ClockConfig>


  //Disabling HSI
  RCC_HSI_delete_Struct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80003c0:	2110      	movs	r1, #16
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
  RCC_HSI_delete_Struct.HSIState = RCC_HSI_OFF;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  HAL_RCC_OscConfig(&RCC_HSI_delete_Struct);
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fe81 	bl	80010d8 <HAL_RCC_OscConfig>

  // Wait until HSI is off
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY))
 80003d6:	e000      	b.n	80003da <LOW_POWER_CLK_CONFIG+0xaa>
  {
      __NOP();
 80003d8:	46c0      	nop			@ (mov r8, r8)
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY))
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <LOW_POWER_CLK_CONFIG+0xdc>)
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	2380      	movs	r3, #128	@ 0x80
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	4013      	ands	r3, r2
 80003e4:	d1f8      	bne.n	80003d8 <LOW_POWER_CLK_CONFIG+0xa8>
  }

  // MAKE sure PLL is disabled
  RCC->CR &= ~RCC_CR_PLLON;  // Disable PLL
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <LOW_POWER_CLK_CONFIG+0xdc>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <LOW_POWER_CLK_CONFIG+0xdc>)
 80003ec:	4908      	ldr	r1, [pc, #32]	@ (8000410 <LOW_POWER_CLK_CONFIG+0xe0>)
 80003ee:	400a      	ands	r2, r1
 80003f0:	601a      	str	r2, [r3, #0]
  while((RCC->CR & RCC_CR_PLLRDY) != 0);  // Wait for PLL to stop
 80003f2:	46c0      	nop			@ (mov r8, r8)
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <LOW_POWER_CLK_CONFIG+0xdc>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	2380      	movs	r3, #128	@ 0x80
 80003fa:	049b      	lsls	r3, r3, #18
 80003fc:	4013      	ands	r3, r2
 80003fe:	d1f9      	bne.n	80003f4 <LOW_POWER_CLK_CONFIG+0xc4>


}
 8000400:	46c0      	nop			@ (mov r8, r8)
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b01f      	add	sp, #124	@ 0x7c
 8000408:	bd90      	pop	{r4, r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	40021000 	.word	0x40021000
 8000410:	feffffff 	.word	0xfeffffff

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041a:	f000 fa6d 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041e:	f000 f825 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000422:	f000 f925 	bl	8000670 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000426:	f000 f869 	bl	80004fc <MX_TIM3_Init>
  MX_TIM6_Init();
 800042a:	f000 f8e7 	bl	80005fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <main+0x54>)
 8000430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <main+0x54>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	0549      	lsls	r1, r1, #21
 8000438:	430a      	orrs	r2, r1
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <main+0x54>)
 800043e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	055b      	lsls	r3, r3, #21
 8000444:	4013      	ands	r3, r2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  LOW_POWER_CLK_CONFIG();
 800044a:	f7ff ff71 	bl	8000330 <LOW_POWER_CLK_CONFIG>

  // Suspend the Systick Interrupt
  HAL_SuspendTick();
 800044e:	f000 fad9 	bl	8000a04 <HAL_SuspendTick>

  //Enable the Sleep on Exit bit to make sure the processor goes back to SLEEP
  //after an interrupt has been serviced
  HAL_PWR_EnableSleepOnExit();
 8000452:	f000 fdaf 	bl	8000fb4 <HAL_PWR_EnableSleepOnExit>
   * Enter Sleep mode with the PWR_LOWPOWERREGULATOR_ON to make sure it
   * runs on Low-Power Run and Low-Power Sleep mode.
   * We also make sure to enable PWR_SLEEPENTRY_WFI so that the cpu wakes
   * up from Low-Power Sleep Mode when the button EXTI interrupt is triggered
   */
  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000456:	2380      	movs	r3, #128	@ 0x80
 8000458:	01db      	lsls	r3, r3, #7
 800045a:	2101      	movs	r1, #1
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fd73 	bl	8000f48 <HAL_PWR_EnterSLEEPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	e7fd      	b.n	8000462 <main+0x4e>
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b093      	sub	sp, #76	@ 0x4c
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	2414      	movs	r4, #20
 8000474:	193b      	adds	r3, r7, r4
 8000476:	0018      	movs	r0, r3
 8000478:	2334      	movs	r3, #52	@ 0x34
 800047a:	001a      	movs	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f002 fcef 	bl	8002e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	0018      	movs	r0, r3
 8000486:	2310      	movs	r3, #16
 8000488:	001a      	movs	r2, r3
 800048a:	2100      	movs	r1, #0
 800048c:	f002 fce8 	bl	8002e60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000490:	2380      	movs	r3, #128	@ 0x80
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fd9b 	bl	8000fd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2202      	movs	r2, #2
 800049e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	0052      	lsls	r2, r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2240      	movs	r2, #64	@ 0x40
 80004b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe0b 	bl	80010d8 <HAL_RCC_OscConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004c6:	f000 f917 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f906 	bl	80016f8 <HAL_RCC_ClockConfig>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f0:	f000 f902 	bl	80006f8 <Error_Handler>
  }
}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b013      	add	sp, #76	@ 0x4c
 80004fa:	bd90      	pop	{r4, r7, pc}

080004fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	@ 0x38
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	2328      	movs	r3, #40	@ 0x28
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 fca7 	bl	8002e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	231c      	movs	r3, #28
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	0018      	movs	r0, r3
 8000518:	230c      	movs	r3, #12
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fc9f 	bl	8002e60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000522:	003b      	movs	r3, r7
 8000524:	0018      	movs	r0, r3
 8000526:	231c      	movs	r3, #28
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 fc98 	bl	8002e60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000530:	4b30      	ldr	r3, [pc, #192]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000532:	4a31      	ldr	r2, [pc, #196]	@ (80005f8 <MX_TIM3_Init+0xfc>)
 8000534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000538:	221f      	movs	r2, #31
 800053a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000544:	22f4      	movs	r2, #244	@ 0xf4
 8000546:	32ff      	adds	r2, #255	@ 0xff
 8000548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000556:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000558:	0018      	movs	r0, r3
 800055a:	f001 fa57 	bl	8001a0c <HAL_TIM_Base_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000562:	f000 f8c9 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	2128      	movs	r1, #40	@ 0x28
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	0152      	lsls	r2, r2, #5
 800056e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fef4 	bl	8002364 <HAL_TIM_ConfigClockSource>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000580:	f000 f8ba 	bl	80006f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fb14 	bl	8001bb4 <HAL_TIM_PWM_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000590:	f000 f8b2 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	211c      	movs	r1, #28
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a2:	187a      	adds	r2, r7, r1
 80005a4:	4b13      	ldr	r3, [pc, #76]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 fbd9 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005b2:	f000 f8a1 	bl	80006f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2260      	movs	r2, #96	@ 0x60
 80005ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 249;
 80005bc:	003b      	movs	r3, r7
 80005be:	22f9      	movs	r2, #249	@ 0xf9
 80005c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ce:	0039      	movs	r1, r7
 80005d0:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fdc5 	bl	8002164 <HAL_TIM_PWM_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005de:	f000 f88b 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005e2:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <MX_TIM3_Init+0xf8>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 f8eb 	bl	80007c0 <HAL_TIM_MspPostInit>

}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b00e      	add	sp, #56	@ 0x38
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40000400 	.word	0x40000400

080005fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	0018      	movs	r0, r3
 8000606:	230c      	movs	r3, #12
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fc28 	bl	8002e60 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000610:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_TIM6_Init+0x6c>)
 8000612:	4a16      	ldr	r2, [pc, #88]	@ (800066c <MX_TIM6_Init+0x70>)
 8000614:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_TIM6_Init+0x6c>)
 8000618:	221f      	movs	r2, #31
 800061a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_TIM6_Init+0x6c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_TIM6_Init+0x6c>)
 8000624:	22c7      	movs	r2, #199	@ 0xc7
 8000626:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_TIM6_Init+0x6c>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_TIM6_Init+0x6c>)
 8000630:	0018      	movs	r0, r3
 8000632:	f001 f9eb 	bl	8001a0c <HAL_TIM_Base_Init>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800063a:	f000 f85d 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_TIM6_Init+0x6c>)
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fb85 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800065a:	f000 f84d 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000074 	.word	0x20000074
 800066c:	40001000 	.word	0x40001000

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	@ 0x24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	240c      	movs	r4, #12
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f002 fbed 	bl	8002e60 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_GPIO_Init+0x80>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_GPIO_Init+0x80>)
 800068c:	2104      	movs	r1, #4
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	@ 0x34
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_GPIO_Init+0x80>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000696:	2204      	movs	r2, #4
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_GPIO_Init+0x80>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_GPIO_Init+0x80>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_GPIO_Init+0x80>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2288      	movs	r2, #136	@ 0x88
 80006c2:	0352      	lsls	r2, r2, #13
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a09      	ldr	r2, [pc, #36]	@ (80006f4 <MX_GPIO_Init+0x84>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 fa82 	bl	8000bdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2007      	movs	r0, #7
 80006de:	f000 fa4b 	bl	8000b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006e2:	2007      	movs	r0, #7
 80006e4:	f000 fa5d 	bl	8000ba2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b009      	add	sp, #36	@ 0x24
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	50000800 	.word	0x50000800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_MspInit+0x44>)
 800070c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_MspInit+0x44>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	641a      	str	r2, [r3, #64]	@ 0x40
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <HAL_MspInit+0x44>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_MspInit+0x44>)
 8000724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <HAL_MspInit+0x44>)
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	0549      	lsls	r1, r1, #21
 800072c:	430a      	orrs	r2, r1
 800072e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_MspInit+0x44>)
 8000732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	055b      	lsls	r3, r3, #21
 8000738:	4013      	ands	r3, r2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			@ (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a16      	ldr	r2, [pc, #88]	@ (80007b4 <HAL_TIM_Base_MspInit+0x68>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10c      	bne.n	8000778 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 8000760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 8000764:	2102      	movs	r1, #2
 8000766:	430a      	orrs	r2, r1
 8000768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 800076c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800076e:	2202      	movs	r2, #2
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000776:	e018      	b.n	80007aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <HAL_TIM_Base_MspInit+0x70>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d113      	bne.n	80007aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 8000784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 8000788:	2110      	movs	r1, #16
 800078a:	430a      	orrs	r2, r1
 800078c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_TIM_Base_MspInit+0x6c>)
 8000790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000792:	2210      	movs	r2, #16
 8000794:	4013      	ands	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2011      	movs	r0, #17
 80007a0:	f000 f9ea 	bl	8000b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80007a4:	2011      	movs	r0, #17
 80007a6:	f000 f9fc 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	40000400 	.word	0x40000400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40001000 	.word	0x40001000

080007c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b089      	sub	sp, #36	@ 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	240c      	movs	r4, #12
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fb44 	bl	8002e60 <memset>
  if(htim->Instance==TIM3)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <HAL_TIM_MspPostInit+0x70>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d122      	bne.n	8000828 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_TIM_MspPostInit+0x74>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <HAL_TIM_MspPostInit+0x74>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <HAL_TIM_MspPostInit+0x74>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007fa:	0021      	movs	r1, r4
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2240      	movs	r2, #64	@ 0x40
 8000800:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2202      	movs	r2, #2
 8000806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2201      	movs	r2, #1
 8000818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	187a      	adds	r2, r7, r1
 800081c:	23a0      	movs	r3, #160	@ 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f000 f9da 	bl	8000bdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b009      	add	sp, #36	@ 0x24
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	40000400 	.word	0x40000400
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f8b4 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	019b      	lsls	r3, r3, #6
 8000872:	0018      	movs	r0, r3
 8000874:	f000 fb34 	bl	8000ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <TIM6_IRQHandler+0x14>)
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fb64 	bl	8001f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	20000074 	.word	0x20000074

08000898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <Reset_Handler>:
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <LoopForever+0x2>)
 80008a6:	4685      	mov	sp, r0
 80008a8:	f7ff fff6 	bl	8000898 <SystemInit>
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopForever+0x6>)
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopForever+0xa>)
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopForever+0xe>)
 80008b2:	2300      	movs	r3, #0
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:
 80008b6:	58d4      	ldr	r4, [r2, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:
 80008bc:	18c4      	adds	r4, r0, r3
 80008be:	428c      	cmp	r4, r1
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopForever+0x12>)
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopForever+0x16>)
 80008c6:	2300      	movs	r3, #0
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:
 80008ce:	42a2      	cmp	r2, r4
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
 80008d2:	f002 facd 	bl	8002e70 <__libc_init_array>
 80008d6:	f7ff fd9d 	bl	8000414 <main>

080008da <LoopForever>:
 80008da:	e7fe      	b.n	80008da <LoopForever>
 80008dc:	20009000 	.word	0x20009000
 80008e0:	20000000 	.word	0x20000000
 80008e4:	2000000c 	.word	0x2000000c
 80008e8:	08002f6c 	.word	0x08002f6c
 80008ec:	2000000c 	.word	0x2000000c
 80008f0:	200000c8 	.word	0x200000c8

080008f4 <ADC1_IRQHandler>:
 80008f4:	e7fe      	b.n	80008f4 <ADC1_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <HAL_Init+0x3c>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_Init+0x3c>)
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	0049      	lsls	r1, r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f810 	bl	8000938 <HAL_InitTick>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d003      	beq.n	8000924 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e001      	b.n	8000928 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff feee 	bl	8000704 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
}
 800092c:	0018      	movs	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	b002      	add	sp, #8
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40022000 	.word	0x40022000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <HAL_InitTick+0x88>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d02b      	beq.n	80009a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000950:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_InitTick+0x8c>)
 8000952:	681c      	ldr	r4, [r3, #0]
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <HAL_InitTick+0x88>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0019      	movs	r1, r3
 800095a:	23fa      	movs	r3, #250	@ 0xfa
 800095c:	0098      	lsls	r0, r3, #2
 800095e:	f7ff fbcf 	bl	8000100 <__udivsi3>
 8000962:	0003      	movs	r3, r0
 8000964:	0019      	movs	r1, r3
 8000966:	0020      	movs	r0, r4
 8000968:	f7ff fbca 	bl	8000100 <__udivsi3>
 800096c:	0003      	movs	r3, r0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f927 	bl	8000bc2 <HAL_SYSTICK_Config>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d112      	bne.n	800099e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d80a      	bhi.n	8000994 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2301      	movs	r3, #1
 8000982:	425b      	negs	r3, r3
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f8f6 	bl	8000b78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_InitTick+0x90>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e00d      	b.n	80009b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	230f      	movs	r3, #15
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
 800099c:	e008      	b.n	80009b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099e:	230f      	movs	r3, #15
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e003      	b.n	80009b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a8:	230f      	movs	r3, #15
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	781b      	ldrb	r3, [r3, #0]
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b005      	add	sp, #20
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000008 	.word	0x20000008
 80009ec:	200000c4 	.word	0x200000c4

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	200000c4 	.word	0x200000c4

08000a04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <HAL_SuspendTick+0x18>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_SuspendTick+0x18>)
 8000a0e:	2102      	movs	r1, #2
 8000a10:	438a      	bics	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a32:	d809      	bhi.n	8000a48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	001a      	movs	r2, r3
 8000a3a:	231f      	movs	r3, #31
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <__NVIC_EnableIRQ+0x30>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	4091      	lsls	r1, r2
 8000a44:	000a      	movs	r2, r1
 8000a46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a68:	d828      	bhi.n	8000abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <__NVIC_SetPriority+0xd4>)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	33c0      	adds	r3, #192	@ 0xc0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	589b      	ldr	r3, [r3, r2]
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	400a      	ands	r2, r1
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	21ff      	movs	r1, #255	@ 0xff
 8000a88:	4091      	lsls	r1, r2
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	22ff      	movs	r2, #255	@ 0xff
 8000a98:	401a      	ands	r2, r3
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4003      	ands	r3, r0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <__NVIC_SetPriority+0xd4>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	33c0      	adds	r3, #192	@ 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aba:	e031      	b.n	8000b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <__NVIC_SetPriority+0xd8>)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3306      	adds	r3, #6
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	@ 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	@ 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001c      	movs	r4, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4023      	ands	r3, r4
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	3306      	adds	r3, #6
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	18c3      	adds	r3, r0, r3
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b003      	add	sp, #12
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	045b      	lsls	r3, r3, #17
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d301      	bcc.n	8000b48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b44:	2301      	movs	r3, #1
 8000b46:	e010      	b.n	8000b6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <SysTick_Config+0x44>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2103      	movs	r1, #3
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff7c 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <SysTick_Config+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <SysTick_Config+0x44>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	210f      	movs	r1, #15
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	0002      	movs	r2, r0
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff33 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ffaf 	bl	8000b30 <SysTick_Config>
 8000bd2:	0003      	movs	r3, r0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bea:	e147      	b.n	8000e7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x28>
 8000c02:	e138      	b.n	8000e76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d005      	beq.n	8000c1c <HAL_GPIO_Init+0x40>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2203      	movs	r2, #3
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d130      	bne.n	8000c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	091b      	lsrs	r3, r3, #4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2203      	movs	r2, #3
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d017      	beq.n	8000cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	2203      	movs	r2, #3
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d123      	bne.n	8000d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	58d3      	ldr	r3, [r2, r3]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	4013      	ands	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	08da      	lsrs	r2, r3, #3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3208      	adds	r2, #8
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	6939      	ldr	r1, [r7, #16]
 8000d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	23c0      	movs	r3, #192	@ 0xc0
 8000d48:	029b      	lsls	r3, r3, #10
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d100      	bne.n	8000d50 <HAL_GPIO_Init+0x174>
 8000d4e:	e092      	b.n	8000e76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d50:	4a50      	ldr	r2, [pc, #320]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3318      	adds	r3, #24
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	589b      	ldr	r3, [r3, r2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4013      	ands	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	220f      	movs	r2, #15
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	23a0      	movs	r3, #160	@ 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x1ca>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a45      	ldr	r2, [pc, #276]	@ (8000e98 <HAL_GPIO_Init+0x2bc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x1c6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a44      	ldr	r2, [pc, #272]	@ (8000e9c <HAL_GPIO_Init+0x2c0>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x1c2>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a43      	ldr	r2, [pc, #268]	@ (8000ea0 <HAL_GPIO_Init+0x2c4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x1be>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x1cc>
 8000da6:	2300      	movs	r3, #0
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	2103      	movs	r1, #3
 8000dac:	400a      	ands	r2, r1
 8000dae:	00d2      	lsls	r2, r2, #3
 8000db0:	4093      	lsls	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000db8:	4936      	ldr	r1, [pc, #216]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	2380      	movs	r3, #128	@ 0x80
 8000ddc:	035b      	lsls	r3, r3, #13
 8000dde:	4013      	ands	r3, r2
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000df0:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	43da      	mvns	r2, r3
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	039b      	lsls	r3, r3, #14
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e1c:	2384      	movs	r3, #132	@ 0x84
 8000e1e:	58d3      	ldr	r3, [r2, r3]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e40:	4914      	ldr	r1, [pc, #80]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e42:	2284      	movs	r2, #132	@ 0x84
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	58d3      	ldr	r3, [r2, r3]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	025b      	lsls	r3, r3, #9
 8000e62:	4013      	ands	r3, r2
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e6e:	4909      	ldr	r1, [pc, #36]	@ (8000e94 <HAL_GPIO_Init+0x2b8>)
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	40da      	lsrs	r2, r3
 8000e84:	1e13      	subs	r3, r2, #0
 8000e86:	d000      	beq.n	8000e8a <HAL_GPIO_Init+0x2ae>
 8000e88:	e6b0      	b.n	8000bec <HAL_GPIO_Init+0x10>
  }
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b006      	add	sp, #24
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021800 	.word	0x40021800
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	50000800 	.word	0x50000800
 8000ea0:	50000c00 	.word	0x50000c00

08000ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	000a      	movs	r2, r1
 8000eae:	1cbb      	adds	r3, r7, #2
 8000eb0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	1cba      	adds	r2, r7, #2
 8000eb8:	8812      	ldrh	r2, [r2, #0]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	e003      	b.n	8000ed0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000eec:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	1dba      	adds	r2, r7, #6
 8000ef2:	8812      	ldrh	r2, [r2, #0]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d008      	beq.n	8000f0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000efa:	1dba      	adds	r2, r7, #6
 8000efc:	8812      	ldrh	r2, [r2, #0]
 8000efe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000f00:	1dbb      	adds	r3, r7, #6
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff f9fd 	bl	8000304 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	1dba      	adds	r2, r7, #6
 8000f10:	8812      	ldrh	r2, [r2, #0]
 8000f12:	4013      	ands	r3, r2
 8000f14:	d008      	beq.n	8000f28 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f18:	1dba      	adds	r2, r7, #6
 8000f1a:	8812      	ldrh	r2, [r2, #0]
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f1e:	1dbb      	adds	r3, r7, #6
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f806 	bl	8000f34 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021800 	.word	0x40021800

08000f34 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	000a      	movs	r2, r1
 8000f52:	1cfb      	adds	r3, r7, #3
 8000f54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_PWR_EnterSLEEPMode+0x64>)
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d10c      	bne.n	8000f82 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000f68:	f000 f872 	bl	8001050 <HAL_PWREx_EnableLowPowerRunMode>
 8000f6c:	e009      	b.n	8000f82 <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_PWR_EnterSLEEPMode+0x64>)
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000f7a:	f000 f877 	bl	800106c <HAL_PWREx_DisableLowPowerRunMode>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d10f      	bne.n	8000fa2 <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <HAL_PWR_EnterSLEEPMode+0x68>)
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_PWR_EnterSLEEPMode+0x68>)
 8000f88:	2104      	movs	r1, #4
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000f8e:	1cfb      	adds	r3, r7, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f96:	bf30      	wfi
 8000f98:	e004      	b.n	8000fa4 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000f9a:	bf40      	sev
    __WFE();
 8000f9c:	bf20      	wfe
    __WFE();
 8000f9e:	bf20      	wfe
 8000fa0:	e000      	b.n	8000fa4 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8000fa2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	40007000 	.word	0x40007000
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_PWR_EnableSleepOnExit>:
  *         useful when the processor is expected to run only on interruptions
  *         handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <HAL_PWR_EnableSleepOnExit+0x18>)
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_PWR_EnableSleepOnExit+0x18>)
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d11f      	bne.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	189b      	adds	r3, r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4912      	ldr	r1, [pc, #72]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f87c 	bl	8000100 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100e:	e008      	b.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3b01      	subs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e001      	b.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e009      	b.n	8001036 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	401a      	ands	r2, r3
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	429a      	cmp	r2, r3
 8001032:	d0ed      	beq.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40007000 	.word	0x40007000
 8001044:	fffff9ff 	.word	0xfffff9ff
 8001048:	20000000 	.word	0x20000000
 800104c:	000f4240 	.word	0x000f4240

08001050 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	01c9      	lsls	r1, r1, #7
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	0013      	movs	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	189b      	adds	r3, r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4913      	ldr	r1, [pc, #76]	@ (80010cc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff f83d 	bl	8000100 <__udivsi3>
 8001086:	0003      	movs	r3, r0
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001092:	4910      	ldr	r1, [pc, #64]	@ (80010d4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001098:	e008      	b.n	80010ac <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	e001      	b.n	80010ac <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e009      	b.n	80010c0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	401a      	ands	r2, r3
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d0ed      	beq.n	800109a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	000f4240 	.word	0x000f4240
 80010d0:	40007000 	.word	0x40007000
 80010d4:	ffffbfff 	.word	0xffffbfff

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e2f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	d100      	bne.n	80010f6 <HAL_RCC_OscConfig+0x1e>
 80010f4:	e07c      	b.n	80011f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f6:	4bc3      	ldr	r3, [pc, #780]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2238      	movs	r2, #56	@ 0x38
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001100:	4bc0      	ldr	r3, [pc, #768]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b10      	cmp	r3, #16
 800110e:	d102      	bne.n	8001116 <HAL_RCC_OscConfig+0x3e>
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d002      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b08      	cmp	r3, #8
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4bb9      	ldr	r3, [pc, #740]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d062      	beq.n	80011ee <HAL_RCC_OscConfig+0x116>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d15e      	bne.n	80011ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e2ce      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	429a      	cmp	r2, r3
 800113e:	d107      	bne.n	8001150 <HAL_RCC_OscConfig+0x78>
 8001140:	4bb0      	ldr	r3, [pc, #704]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4baf      	ldr	r3, [pc, #700]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001146:	2180      	movs	r1, #128	@ 0x80
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e020      	b.n	8001192 <HAL_RCC_OscConfig+0xba>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	23a0      	movs	r3, #160	@ 0xa0
 8001156:	02db      	lsls	r3, r3, #11
 8001158:	429a      	cmp	r2, r3
 800115a:	d10e      	bne.n	800117a <HAL_RCC_OscConfig+0xa2>
 800115c:	4ba9      	ldr	r3, [pc, #676]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4ba8      	ldr	r3, [pc, #672]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001162:	2180      	movs	r1, #128	@ 0x80
 8001164:	02c9      	lsls	r1, r1, #11
 8001166:	430a      	orrs	r2, r1
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	4ba6      	ldr	r3, [pc, #664]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4ba5      	ldr	r3, [pc, #660]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	0249      	lsls	r1, r1, #9
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e00b      	b.n	8001192 <HAL_RCC_OscConfig+0xba>
 800117a:	4ba2      	ldr	r3, [pc, #648]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba1      	ldr	r3, [pc, #644]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001180:	49a1      	ldr	r1, [pc, #644]	@ (8001408 <HAL_RCC_OscConfig+0x330>)
 8001182:	400a      	ands	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	4b9f      	ldr	r3, [pc, #636]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b9e      	ldr	r3, [pc, #632]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800118c:	499f      	ldr	r1, [pc, #636]	@ (800140c <HAL_RCC_OscConfig+0x334>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d014      	beq.n	80011c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119a:	f7ff fc29 	bl	80009f0 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fc24 	bl	80009f0 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	@ 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e28d      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b6:	4b93      	ldr	r3, [pc, #588]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	029b      	lsls	r3, r3, #10
 80011be:	4013      	ands	r3, r2
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0xcc>
 80011c2:	e015      	b.n	80011f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc14 	bl	80009f0 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ce:	f7ff fc0f 	bl	80009f0 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	@ 0x64
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e278      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011e0:	4b88      	ldr	r3, [pc, #544]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0xf6>
 80011ec:	e000      	b.n	80011f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	4013      	ands	r3, r2
 80011f8:	d100      	bne.n	80011fc <HAL_RCC_OscConfig+0x124>
 80011fa:	e099      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fc:	4b81      	ldr	r3, [pc, #516]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2238      	movs	r2, #56	@ 0x38
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2203      	movs	r2, #3
 800120c:	4013      	ands	r3, r2
 800120e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b10      	cmp	r3, #16
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x144>
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d002      	beq.n	8001222 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d135      	bne.n	800128e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001222:	4b78      	ldr	r3, [pc, #480]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4013      	ands	r3, r2
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x162>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e24b      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	4b72      	ldr	r3, [pc, #456]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a74      	ldr	r2, [pc, #464]	@ (8001410 <HAL_RCC_OscConfig+0x338>)
 8001240:	4013      	ands	r3, r2
 8001242:	0019      	movs	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	021a      	lsls	r2, r3, #8
 800124a:	4b6e      	ldr	r3, [pc, #440]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d112      	bne.n	800127c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001256:	4b6b      	ldr	r3, [pc, #428]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	@ (8001414 <HAL_RCC_OscConfig+0x33c>)
 800125c:	4013      	ands	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	4b67      	ldr	r3, [pc, #412]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800126a:	4b66      	ldr	r3, [pc, #408]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0adb      	lsrs	r3, r3, #11
 8001270:	2207      	movs	r2, #7
 8001272:	4013      	ands	r3, r2
 8001274:	4a68      	ldr	r2, [pc, #416]	@ (8001418 <HAL_RCC_OscConfig+0x340>)
 8001276:	40da      	lsrs	r2, r3
 8001278:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_RCC_OscConfig+0x344>)
 800127a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800127c:	4b68      	ldr	r3, [pc, #416]	@ (8001420 <HAL_RCC_OscConfig+0x348>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff fb59 	bl	8000938 <HAL_InitTick>
 8001286:	1e03      	subs	r3, r0, #0
 8001288:	d051      	beq.n	800132e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e221      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d030      	beq.n	80012f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001296:	4b5b      	ldr	r3, [pc, #364]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a5e      	ldr	r2, [pc, #376]	@ (8001414 <HAL_RCC_OscConfig+0x33c>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	4b57      	ldr	r3, [pc, #348]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012aa:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b55      	ldr	r3, [pc, #340]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	2180      	movs	r1, #128	@ 0x80
 80012b2:	0049      	lsls	r1, r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b8:	f7ff fb9a 	bl	80009f0 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb95 	bl	80009f0 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e1fe      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b48      	ldr	r3, [pc, #288]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001410 <HAL_RCC_OscConfig+0x338>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	021a      	lsls	r2, r3, #8
 80012f0:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	e01b      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b41      	ldr	r3, [pc, #260]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	4949      	ldr	r1, [pc, #292]	@ (8001424 <HAL_RCC_OscConfig+0x34c>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff fb74 	bl	80009f0 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fb6f 	bl	80009f0 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1d8      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x236>
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2208      	movs	r2, #8
 8001336:	4013      	ands	r3, r2
 8001338:	d047      	beq.n	80013ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800133a:	4b32      	ldr	r3, [pc, #200]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2238      	movs	r2, #56	@ 0x38
 8001340:	4013      	ands	r3, r2
 8001342:	2b18      	cmp	r3, #24
 8001344:	d10a      	bne.n	800135c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001346:	4b2f      	ldr	r3, [pc, #188]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d03c      	beq.n	80013ca <HAL_RCC_OscConfig+0x2f2>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d138      	bne.n	80013ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e1ba      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d019      	beq.n	8001398 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 8001366:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001368:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb3e 	bl	80009f0 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff fb39 	bl	80009f0 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1a2      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800138c:	4b1d      	ldr	r3, [pc, #116]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d0f1      	beq.n	800137a <HAL_RCC_OscConfig+0x2a2>
 8001396:	e018      	b.n	80013ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 800139e:	2101      	movs	r1, #1
 80013a0:	438a      	bics	r2, r1
 80013a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb24 	bl	80009f0 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb1f 	bl	80009f0 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e188      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c4:	2202      	movs	r2, #2
 80013c6:	4013      	ands	r3, r2
 80013c8:	d1f1      	bne.n	80013ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2204      	movs	r2, #4
 80013d0:	4013      	ands	r3, r2
 80013d2:	d100      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2fe>
 80013d4:	e0c6      	b.n	8001564 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	231f      	movs	r3, #31
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2238      	movs	r2, #56	@ 0x38
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d11e      	bne.n	8001428 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d100      	bne.n	80013f6 <HAL_RCC_OscConfig+0x31e>
 80013f4:	e0b6      	b.n	8001564 <HAL_RCC_OscConfig+0x48c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d000      	beq.n	8001400 <HAL_RCC_OscConfig+0x328>
 80013fe:	e0b1      	b.n	8001564 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e166      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
 8001404:	40021000 	.word	0x40021000
 8001408:	fffeffff 	.word	0xfffeffff
 800140c:	fffbffff 	.word	0xfffbffff
 8001410:	ffff80ff 	.word	0xffff80ff
 8001414:	ffffc7ff 	.word	0xffffc7ff
 8001418:	00f42400 	.word	0x00f42400
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004
 8001424:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001428:	4bac      	ldr	r3, [pc, #688]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800142a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	055b      	lsls	r3, r3, #21
 8001430:	4013      	ands	r3, r2
 8001432:	d101      	bne.n	8001438 <HAL_RCC_OscConfig+0x360>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x362>
 8001438:	2300      	movs	r3, #0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d011      	beq.n	8001462 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4ba7      	ldr	r3, [pc, #668]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001442:	4ba6      	ldr	r3, [pc, #664]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001444:	2180      	movs	r1, #128	@ 0x80
 8001446:	0549      	lsls	r1, r1, #21
 8001448:	430a      	orrs	r2, r1
 800144a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800144c:	4ba3      	ldr	r3, [pc, #652]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800144e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	055b      	lsls	r3, r3, #21
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800145a:	231f      	movs	r3, #31
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001462:	4b9f      	ldr	r3, [pc, #636]	@ (80016e0 <HAL_RCC_OscConfig+0x608>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4013      	ands	r3, r2
 800146c:	d11a      	bne.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800146e:	4b9c      	ldr	r3, [pc, #624]	@ (80016e0 <HAL_RCC_OscConfig+0x608>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b9b      	ldr	r3, [pc, #620]	@ (80016e0 <HAL_RCC_OscConfig+0x608>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	0049      	lsls	r1, r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800147c:	f7ff fab8 	bl	80009f0 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fab3 	bl	80009f0 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e11c      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001498:	4b91      	ldr	r3, [pc, #580]	@ (80016e0 <HAL_RCC_OscConfig+0x608>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x3e2>
 80014ac:	4b8b      	ldr	r3, [pc, #556]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014b0:	4b8a      	ldr	r3, [pc, #552]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x404>
 80014c2:	4b86      	ldr	r3, [pc, #536]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014c8:	2104      	movs	r1, #4
 80014ca:	430a      	orrs	r2, r1
 80014cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014ce:	4b83      	ldr	r3, [pc, #524]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014d2:	4b82      	ldr	r3, [pc, #520]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
 80014dc:	4b7f      	ldr	r3, [pc, #508]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e0:	4b7e      	ldr	r3, [pc, #504]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	438a      	bics	r2, r1
 80014e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014e8:	4b7c      	ldr	r3, [pc, #496]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014ec:	4b7b      	ldr	r3, [pc, #492]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80014ee:	2104      	movs	r1, #4
 80014f0:	438a      	bics	r2, r1
 80014f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d014      	beq.n	8001526 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fa78 	bl	80009f0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001504:	e009      	b.n	800151a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fa73 	bl	80009f0 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a74      	ldr	r2, [pc, #464]	@ (80016e4 <HAL_RCC_OscConfig+0x60c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0db      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800151a:	4b70      	ldr	r3, [pc, #448]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800151c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x42e>
 8001524:	e013      	b.n	800154e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fa63 	bl	80009f0 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800152e:	e009      	b.n	8001544 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fa5e 	bl	80009f0 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	4a6a      	ldr	r2, [pc, #424]	@ (80016e4 <HAL_RCC_OscConfig+0x60c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0c6      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001544:	4b65      	ldr	r3, [pc, #404]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001548:	2202      	movs	r2, #2
 800154a:	4013      	ands	r3, r2
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800154e:	231f      	movs	r3, #31
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b60      	ldr	r3, [pc, #384]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800155a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800155c:	4b5f      	ldr	r3, [pc, #380]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800155e:	4962      	ldr	r1, [pc, #392]	@ (80016e8 <HAL_RCC_OscConfig+0x610>)
 8001560:	400a      	ands	r2, r1
 8001562:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d100      	bne.n	800156e <HAL_RCC_OscConfig+0x496>
 800156c:	e0b0      	b.n	80016d0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156e:	4b5b      	ldr	r3, [pc, #364]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	4013      	ands	r3, r2
 8001576:	2b10      	cmp	r3, #16
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x4a4>
 800157a:	e078      	b.n	800166e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d153      	bne.n	800162c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b55      	ldr	r3, [pc, #340]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b54      	ldr	r3, [pc, #336]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800158a:	4958      	ldr	r1, [pc, #352]	@ (80016ec <HAL_RCC_OscConfig+0x614>)
 800158c:	400a      	ands	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fa2e 	bl	80009f0 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fa29 	bl	80009f0 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e092      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	049b      	lsls	r3, r3, #18
 80015b4:	4013      	ands	r3, r2
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b8:	4b48      	ldr	r3, [pc, #288]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a4c      	ldr	r2, [pc, #304]	@ (80016f0 <HAL_RCC_OscConfig+0x618>)
 80015be:	4013      	ands	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	431a      	orrs	r2, r3
 80015e0:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e6:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4b3c      	ldr	r3, [pc, #240]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015ec:	2180      	movs	r1, #128	@ 0x80
 80015ee:	0449      	lsls	r1, r1, #17
 80015f0:	430a      	orrs	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80015f4:	4b39      	ldr	r3, [pc, #228]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b38      	ldr	r3, [pc, #224]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	0549      	lsls	r1, r1, #21
 80015fe:	430a      	orrs	r2, r1
 8001600:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001602:	f7ff f9f5 	bl	80009f0 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff f9f0 	bl	80009f0 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e059      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161e:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	049b      	lsls	r3, r3, #18
 8001626:	4013      	ands	r3, r2
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0x534>
 800162a:	e051      	b.n	80016d0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001632:	492e      	ldr	r1, [pc, #184]	@ (80016ec <HAL_RCC_OscConfig+0x614>)
 8001634:	400a      	ands	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001638:	f7ff f9da 	bl	80009f0 <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff f9d5 	bl	80009f0 <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e03e      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	049b      	lsls	r3, r3, #18
 800165c:	4013      	ands	r3, r2
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 8001666:	4923      	ldr	r1, [pc, #140]	@ (80016f4 <HAL_RCC_OscConfig+0x61c>)
 8001668:	400a      	ands	r2, r1
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	e030      	b.n	80016d0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e02b      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_RCC_OscConfig+0x604>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2203      	movs	r2, #3
 8001684:	401a      	ands	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	429a      	cmp	r2, r3
 800168c:	d11e      	bne.n	80016cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2270      	movs	r2, #112	@ 0x70
 8001692:	401a      	ands	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d117      	bne.n	80016cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	23fe      	movs	r3, #254	@ 0xfe
 80016a0:	01db      	lsls	r3, r3, #7
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d10e      	bne.n	80016cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	23f8      	movs	r3, #248	@ 0xf8
 80016b2:	039b      	lsls	r3, r3, #14
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	0f5b      	lsrs	r3, r3, #29
 80016c2:	075a      	lsls	r2, r3, #29
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b008      	add	sp, #32
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	00001388 	.word	0x00001388
 80016e8:	efffffff 	.word	0xefffffff
 80016ec:	feffffff 	.word	0xfeffffff
 80016f0:	1fc1808c 	.word	0x1fc1808c
 80016f4:	effefffc 	.word	0xeffefffc

080016f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0e9      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b76      	ldr	r3, [pc, #472]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2207      	movs	r2, #7
 8001712:	4013      	ands	r3, r2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d91e      	bls.n	8001758 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b73      	ldr	r3, [pc, #460]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2207      	movs	r2, #7
 8001720:	4393      	bics	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	4b70      	ldr	r3, [pc, #448]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800172c:	f7ff f960 	bl	80009f0 <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f95b 	bl	80009f0 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a6a      	ldr	r2, [pc, #424]	@ (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0ca      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800174a:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2207      	movs	r2, #7
 8001750:	4013      	ands	r3, r2
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d015      	beq.n	800178e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d006      	beq.n	800177a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800176c:	4b60      	ldr	r3, [pc, #384]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001772:	21e0      	movs	r1, #224	@ 0xe0
 8001774:	01c9      	lsls	r1, r1, #7
 8001776:	430a      	orrs	r2, r1
 8001778:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4a5d      	ldr	r2, [pc, #372]	@ (80018f4 <HAL_RCC_ClockConfig+0x1fc>)
 8001780:	4013      	ands	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	4b59      	ldr	r3, [pc, #356]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d057      	beq.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d12b      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e097      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	@ 0x80
 80017be:	049b      	lsls	r3, r3, #18
 80017c0:	4013      	ands	r3, r2
 80017c2:	d11f      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e08b      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	d113      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e07f      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e8:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e074      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80017f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e06d      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001804:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2207      	movs	r2, #7
 800180a:	4393      	bics	r3, r2
 800180c:	0019      	movs	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4b37      	ldr	r3, [pc, #220]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001818:	f7ff f8ea 	bl	80009f0 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001820:	e009      	b.n	8001836 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001822:	f7ff f8e5 	bl	80009f0 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a2f      	ldr	r2, [pc, #188]	@ (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e054      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2238      	movs	r2, #56	@ 0x38
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	429a      	cmp	r2, r3
 8001846:	d1ec      	bne.n	8001822 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2207      	movs	r2, #7
 800184e:	4013      	ands	r3, r2
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d21e      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2207      	movs	r2, #7
 800185c:	4393      	bics	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001868:	f7ff f8c2 	bl	80009f0 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001870:	e009      	b.n	8001886 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001872:	f7ff f8bd 	bl	80009f0 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <HAL_RCC_ClockConfig+0x1f4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e02c      	b.n	80018e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2207      	movs	r2, #7
 800188c:	4013      	ands	r3, r2
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <HAL_RCC_ClockConfig+0x200>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018b2:	f000 f829 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018b6:	0001      	movs	r1, r0
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	220f      	movs	r2, #15
 80018c0:	401a      	ands	r2, r3
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_RCC_ClockConfig+0x204>)
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	58d3      	ldr	r3, [r2, r3]
 80018c8:	221f      	movs	r2, #31
 80018ca:	4013      	ands	r3, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	40da      	lsrs	r2, r3
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x208>)
 80018d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_ClockConfig+0x20c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff f82d 	bl	8000938 <HAL_InitTick>
 80018de:	0003      	movs	r3, r0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	00001388 	.word	0x00001388
 80018f0:	40021000 	.word	0x40021000
 80018f4:	fffff0ff 	.word	0xfffff0ff
 80018f8:	ffff8fff 	.word	0xffff8fff
 80018fc:	08002ed0 	.word	0x08002ed0
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2238      	movs	r2, #56	@ 0x38
 8001914:	4013      	ands	r3, r2
 8001916:	d10f      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001918:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0adb      	lsrs	r3, r3, #11
 800191e:	2207      	movs	r2, #7
 8001920:	4013      	ands	r3, r2
 8001922:	2201      	movs	r2, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	4835      	ldr	r0, [pc, #212]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 800192e:	f7fe fbe7 	bl	8000100 <__udivsi3>
 8001932:	0003      	movs	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e05d      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001938:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2238      	movs	r2, #56	@ 0x38
 800193e:	4013      	ands	r3, r2
 8001940:	2b08      	cmp	r3, #8
 8001942:	d102      	bne.n	800194a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001944:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x100>)
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e054      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	@ 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	2b10      	cmp	r3, #16
 8001954:	d138      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001960:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	2207      	movs	r2, #7
 8001968:	4013      	ands	r3, r2
 800196a:	3301      	adds	r3, #1
 800196c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <HAL_RCC_GetSysClockFreq+0x100>)
 8001978:	f7fe fbc2 	bl	8000100 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	0019      	movs	r1, r3
 8001980:	4b1f      	ldr	r3, [pc, #124]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	227f      	movs	r2, #127	@ 0x7f
 8001988:	4013      	ands	r3, r2
 800198a:	434b      	muls	r3, r1
 800198c:	617b      	str	r3, [r7, #20]
        break;
 800198e:	e00d      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	481c      	ldr	r0, [pc, #112]	@ (8001a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001994:	f7fe fbb4 	bl	8000100 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	0019      	movs	r1, r3
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	227f      	movs	r2, #127	@ 0x7f
 80019a4:	4013      	ands	r3, r2
 80019a6:	434b      	muls	r3, r1
 80019a8:	617b      	str	r3, [r7, #20]
        break;
 80019aa:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0f5b      	lsrs	r3, r3, #29
 80019b2:	2207      	movs	r2, #7
 80019b4:	4013      	ands	r3, r2
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7fe fb9f 	bl	8000100 <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e015      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	@ 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d103      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2238      	movs	r2, #56	@ 0x38
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b18      	cmp	r3, #24
 80019e6:	d103      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019e8:	23fa      	movs	r3, #250	@ 0xfa
 80019ea:	01db      	lsls	r3, r3, #7
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	e001      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80019f4:	693b      	ldr	r3, [r7, #16]
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b006      	add	sp, #24
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200

08001a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e04a      	b.n	8001ab4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	223d      	movs	r2, #61	@ 0x3d
 8001a22:	5c9b      	ldrb	r3, [r3, r2]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223c      	movs	r2, #60	@ 0x3c
 8001a2e:	2100      	movs	r1, #0
 8001a30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fe89 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223d      	movs	r2, #61	@ 0x3d
 8001a3e:	2102      	movs	r1, #2
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	0010      	movs	r0, r2
 8001a4e:	f000 fd7f 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2248      	movs	r2, #72	@ 0x48
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223e      	movs	r2, #62	@ 0x3e
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223f      	movs	r2, #63	@ 0x3f
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2240      	movs	r2, #64	@ 0x40
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2241      	movs	r2, #65	@ 0x41
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2242      	movs	r2, #66	@ 0x42
 8001a7e:	2101      	movs	r1, #1
 8001a80:	5499      	strb	r1, [r3, r2]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2243      	movs	r2, #67	@ 0x43
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2244      	movs	r2, #68	@ 0x44
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2245      	movs	r2, #69	@ 0x45
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2246      	movs	r2, #70	@ 0x46
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2247      	movs	r2, #71	@ 0x47
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	223d      	movs	r2, #61	@ 0x3d
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <HAL_TIM_Base_Stop+0x44>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	d10d      	bne.n	8001aec <HAL_TIM_Base_Stop+0x30>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b04 <HAL_TIM_Base_Stop+0x48>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d107      	bne.n	8001aec <HAL_TIM_Base_Stop+0x30>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	223d      	movs	r2, #61	@ 0x3d
 8001af0:	2101      	movs	r1, #1
 8001af2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	00001111 	.word	0x00001111
 8001b04:	00000444 	.word	0x00000444

08001b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	223d      	movs	r2, #61	@ 0x3d
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d001      	beq.n	8001b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e03c      	b.n	8001b9a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	223d      	movs	r2, #61	@ 0x3d
 8001b24:	2102      	movs	r1, #2
 8001b26:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d009      	beq.n	8001b56 <HAL_TIM_Base_Start_IT+0x4e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a18      	ldr	r2, [pc, #96]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d004      	beq.n	8001b56 <HAL_TIM_Base_Start_IT+0x4e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <HAL_TIM_Base_Start_IT+0xa4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d116      	bne.n	8001b84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <HAL_TIM_Base_Start_IT+0xa8>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	d016      	beq.n	8001b96 <HAL_TIM_Base_Start_IT+0x8e>
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d011      	beq.n	8001b96 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b82:	e008      	b.n	8001b96 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e000      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b96:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	40012c00 	.word	0x40012c00
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40014000 	.word	0x40014000
 8001bb0:	00010007 	.word	0x00010007

08001bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e04a      	b.n	8001c5c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	223d      	movs	r2, #61	@ 0x3d
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223c      	movs	r2, #60	@ 0x3c
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f841 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223d      	movs	r2, #61	@ 0x3d
 8001be6:	2102      	movs	r1, #2
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f000 fcab 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2248      	movs	r2, #72	@ 0x48
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223e      	movs	r2, #62	@ 0x3e
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223f      	movs	r2, #63	@ 0x3f
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2241      	movs	r2, #65	@ 0x41
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2242      	movs	r2, #66	@ 0x42
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2243      	movs	r2, #67	@ 0x43
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2244      	movs	r2, #68	@ 0x44
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2245      	movs	r2, #69	@ 0x45
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2246      	movs	r2, #70	@ 0x46
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2247      	movs	r2, #71	@ 0x47
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	223d      	movs	r2, #61	@ 0x3d
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_TIM_PWM_Start+0x22>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	223e      	movs	r2, #62	@ 0x3e
 8001c88:	5c9b      	ldrb	r3, [r3, r2]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	4193      	sbcs	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	e037      	b.n	8001d06 <HAL_TIM_PWM_Start+0x92>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d108      	bne.n	8001cae <HAL_TIM_PWM_Start+0x3a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	223f      	movs	r2, #63	@ 0x3f
 8001ca0:	5c9b      	ldrb	r3, [r3, r2]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	1e5a      	subs	r2, r3, #1
 8001ca8:	4193      	sbcs	r3, r2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	e02b      	b.n	8001d06 <HAL_TIM_PWM_Start+0x92>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d108      	bne.n	8001cc6 <HAL_TIM_PWM_Start+0x52>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2240      	movs	r2, #64	@ 0x40
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	1e5a      	subs	r2, r3, #1
 8001cc0:	4193      	sbcs	r3, r2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	e01f      	b.n	8001d06 <HAL_TIM_PWM_Start+0x92>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d108      	bne.n	8001cde <HAL_TIM_PWM_Start+0x6a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2241      	movs	r2, #65	@ 0x41
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	4193      	sbcs	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	e013      	b.n	8001d06 <HAL_TIM_PWM_Start+0x92>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d108      	bne.n	8001cf6 <HAL_TIM_PWM_Start+0x82>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2242      	movs	r2, #66	@ 0x42
 8001ce8:	5c9b      	ldrb	r3, [r3, r2]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	4193      	sbcs	r3, r2
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	e007      	b.n	8001d06 <HAL_TIM_PWM_Start+0x92>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2243      	movs	r2, #67	@ 0x43
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	4193      	sbcs	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e085      	b.n	8001e1a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <HAL_TIM_PWM_Start+0xaa>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	223e      	movs	r2, #62	@ 0x3e
 8001d18:	2102      	movs	r1, #2
 8001d1a:	5499      	strb	r1, [r3, r2]
 8001d1c:	e023      	b.n	8001d66 <HAL_TIM_PWM_Start+0xf2>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d104      	bne.n	8001d2e <HAL_TIM_PWM_Start+0xba>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	223f      	movs	r2, #63	@ 0x3f
 8001d28:	2102      	movs	r1, #2
 8001d2a:	5499      	strb	r1, [r3, r2]
 8001d2c:	e01b      	b.n	8001d66 <HAL_TIM_PWM_Start+0xf2>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d104      	bne.n	8001d3e <HAL_TIM_PWM_Start+0xca>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2240      	movs	r2, #64	@ 0x40
 8001d38:	2102      	movs	r1, #2
 8001d3a:	5499      	strb	r1, [r3, r2]
 8001d3c:	e013      	b.n	8001d66 <HAL_TIM_PWM_Start+0xf2>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d104      	bne.n	8001d4e <HAL_TIM_PWM_Start+0xda>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	2102      	movs	r1, #2
 8001d4a:	5499      	strb	r1, [r3, r2]
 8001d4c:	e00b      	b.n	8001d66 <HAL_TIM_PWM_Start+0xf2>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d104      	bne.n	8001d5e <HAL_TIM_PWM_Start+0xea>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2242      	movs	r2, #66	@ 0x42
 8001d58:	2102      	movs	r1, #2
 8001d5a:	5499      	strb	r1, [r3, r2]
 8001d5c:	e003      	b.n	8001d66 <HAL_TIM_PWM_Start+0xf2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2243      	movs	r2, #67	@ 0x43
 8001d62:	2102      	movs	r1, #2
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 ffd2 	bl	8002d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2a      	ldr	r2, [pc, #168]	@ (8001e24 <HAL_TIM_PWM_Start+0x1b0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_TIM_PWM_Start+0x128>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_TIM_PWM_Start+0x1b4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_TIM_PWM_Start+0x128>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a27      	ldr	r2, [pc, #156]	@ (8001e2c <HAL_TIM_PWM_Start+0x1b8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_TIM_PWM_Start+0x128>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a26      	ldr	r2, [pc, #152]	@ (8001e30 <HAL_TIM_PWM_Start+0x1bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_TIM_PWM_Start+0x12c>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_TIM_PWM_Start+0x12e>
 8001da0:	2300      	movs	r3, #0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	0209      	lsls	r1, r1, #8
 8001db4:	430a      	orrs	r2, r1
 8001db6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_TIM_PWM_Start+0x1b0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d009      	beq.n	8001dd6 <HAL_TIM_PWM_Start+0x162>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_TIM_PWM_Start+0x1c0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d004      	beq.n	8001dd6 <HAL_TIM_PWM_Start+0x162>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <HAL_TIM_PWM_Start+0x1b4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d116      	bne.n	8001e04 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_TIM_PWM_Start+0x1c4>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d016      	beq.n	8001e16 <HAL_TIM_PWM_Start+0x1a2>
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	2380      	movs	r3, #128	@ 0x80
 8001dec:	025b      	lsls	r3, r3, #9
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d011      	beq.n	8001e16 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e008      	b.n	8001e16 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e000      	b.n	8001e18 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b004      	add	sp, #16
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40014000 	.word	0x40014000
 8001e2c:	40014400 	.word	0x40014400
 8001e30:	40014800 	.word	0x40014800
 8001e34:	40000400 	.word	0x40000400
 8001e38:	00010007 	.word	0x00010007

08001e3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 ff62 	bl	8002d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <HAL_TIM_PWM_Stop+0xfc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_TIM_PWM_Stop+0x40>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	@ (8001f3c <HAL_TIM_PWM_Stop+0x100>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_TIM_PWM_Stop+0x40>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a34      	ldr	r2, [pc, #208]	@ (8001f40 <HAL_TIM_PWM_Stop+0x104>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_PWM_Stop+0x40>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_TIM_PWM_Stop+0x108>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_TIM_PWM_Stop+0x44>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_TIM_PWM_Stop+0x46>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d013      	beq.n	8001eae <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f48 <HAL_TIM_PWM_Stop+0x10c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d10d      	bne.n	8001eae <HAL_TIM_PWM_Stop+0x72>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a2c      	ldr	r2, [pc, #176]	@ (8001f4c <HAL_TIM_PWM_Stop+0x110>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d107      	bne.n	8001eae <HAL_TIM_PWM_Stop+0x72>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4929      	ldr	r1, [pc, #164]	@ (8001f50 <HAL_TIM_PWM_Stop+0x114>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <HAL_TIM_PWM_Stop+0x10c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_TIM_PWM_Stop+0x9a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	@ (8001f4c <HAL_TIM_PWM_Stop+0x110>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_TIM_PWM_Stop+0x9a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_TIM_PWM_Stop+0xaa>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223e      	movs	r2, #62	@ 0x3e
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	5499      	strb	r1, [r3, r2]
 8001ee4:	e023      	b.n	8001f2e <HAL_TIM_PWM_Stop+0xf2>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d104      	bne.n	8001ef6 <HAL_TIM_PWM_Stop+0xba>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	223f      	movs	r2, #63	@ 0x3f
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]
 8001ef4:	e01b      	b.n	8001f2e <HAL_TIM_PWM_Stop+0xf2>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d104      	bne.n	8001f06 <HAL_TIM_PWM_Stop+0xca>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	@ 0x40
 8001f00:	2101      	movs	r1, #1
 8001f02:	5499      	strb	r1, [r3, r2]
 8001f04:	e013      	b.n	8001f2e <HAL_TIM_PWM_Stop+0xf2>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d104      	bne.n	8001f16 <HAL_TIM_PWM_Stop+0xda>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2241      	movs	r2, #65	@ 0x41
 8001f10:	2101      	movs	r1, #1
 8001f12:	5499      	strb	r1, [r3, r2]
 8001f14:	e00b      	b.n	8001f2e <HAL_TIM_PWM_Stop+0xf2>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b10      	cmp	r3, #16
 8001f1a:	d104      	bne.n	8001f26 <HAL_TIM_PWM_Stop+0xea>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2242      	movs	r2, #66	@ 0x42
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]
 8001f24:	e003      	b.n	8001f2e <HAL_TIM_PWM_Stop+0xf2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2243      	movs	r2, #67	@ 0x43
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40014000 	.word	0x40014000
 8001f40:	40014400 	.word	0x40014400
 8001f44:	40014800 	.word	0x40014800
 8001f48:	00001111 	.word	0x00001111
 8001f4c:	00000444 	.word	0x00000444
 8001f50:	ffff7fff 	.word	0xffff7fff

08001f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d021      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2202      	movs	r2, #2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d01d      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2203      	movs	r2, #3
 8001f82:	4252      	negs	r2, r2
 8001f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	d004      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f000 fac0 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e007      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fab3 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fabf 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d01e      	beq.n	8002006 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2205      	movs	r2, #5
 8001fce:	4252      	negs	r2, r2
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	23c0      	movs	r3, #192	@ 0xc0
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 fa99 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8001fee:	e007      	b.n	8002000 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fa8c 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fa98 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2208      	movs	r2, #8
 800200a:	4013      	ands	r3, r2
 800200c:	d021      	beq.n	8002052 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2208      	movs	r2, #8
 8002012:	4013      	ands	r3, r2
 8002014:	d01d      	beq.n	8002052 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2209      	movs	r2, #9
 800201c:	4252      	negs	r2, r2
 800201e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2204      	movs	r2, #4
 8002024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2203      	movs	r2, #3
 800202e:	4013      	ands	r3, r2
 8002030:	d004      	beq.n	800203c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 fa73 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 800203a:	e007      	b.n	800204c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fa66 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 fa72 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2210      	movs	r2, #16
 8002056:	4013      	ands	r3, r2
 8002058:	d022      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	4013      	ands	r3, r2
 8002060:	d01e      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2211      	movs	r2, #17
 8002068:	4252      	negs	r2, r2
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2208      	movs	r2, #8
 8002070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69da      	ldr	r2, [r3, #28]
 8002078:	23c0      	movs	r3, #192	@ 0xc0
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 fa4c 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8002088:	e007      	b.n	800209a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 fa3f 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f000 fa4b 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	d00c      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d008      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4252      	negs	r2, r2
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe f8ab 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	4013      	ands	r3, r2
 80020c8:	d104      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020d2:	d00b      	beq.n	80020ec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	4013      	ands	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <HAL_TIM_IRQHandler+0x208>)
 80020e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 feaa 	bl	8002e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d00b      	beq.n	800210e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	4013      	ands	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <HAL_TIM_IRQHandler+0x20c>)
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fea1 	bl	8002e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	4013      	ands	r3, r2
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	4013      	ands	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2241      	movs	r2, #65	@ 0x41
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fa08 	bl	8002540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	d00c      	beq.n	8002152 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	4013      	ands	r3, r2
 800213e:	d008      	beq.n	8002152 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2221      	movs	r2, #33	@ 0x21
 8002146:	4252      	negs	r2, r2
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 fe6f 	bl	8002e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b004      	add	sp, #16
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	ffffdf7f 	.word	0xffffdf7f
 8002160:	fffffeff 	.word	0xfffffeff

08002164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2317      	movs	r3, #23
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	223c      	movs	r2, #60	@ 0x3c
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002182:	2302      	movs	r3, #2
 8002184:	e0e5      	b.n	8002352 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	223c      	movs	r2, #60	@ 0x3c
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b14      	cmp	r3, #20
 8002192:	d900      	bls.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002194:	e0d1      	b.n	800233a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	009a      	lsls	r2, r3, #2
 800219a:	4b70      	ldr	r3, [pc, #448]	@ (800235c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800219c:	18d3      	adds	r3, r2, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	0011      	movs	r1, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fa54 	bl	8002658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2108      	movs	r1, #8
 80021bc:	430a      	orrs	r2, r1
 80021be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2104      	movs	r1, #4
 80021cc:	438a      	bics	r2, r1
 80021ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6999      	ldr	r1, [r3, #24]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	619a      	str	r2, [r3, #24]
      break;
 80021e2:	e0af      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	0011      	movs	r1, r2
 80021ec:	0018      	movs	r0, r3
 80021ee:	f000 fabd 	bl	800276c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2180      	movs	r1, #128	@ 0x80
 80021fe:	0109      	lsls	r1, r1, #4
 8002200:	430a      	orrs	r2, r1
 8002202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4954      	ldr	r1, [pc, #336]	@ (8002360 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002210:	400a      	ands	r2, r1
 8002212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6999      	ldr	r1, [r3, #24]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	619a      	str	r2, [r3, #24]
      break;
 8002228:	e08c      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	0011      	movs	r1, r2
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fb1e 	bl	8002874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2108      	movs	r1, #8
 8002244:	430a      	orrs	r2, r1
 8002246:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2104      	movs	r1, #4
 8002254:	438a      	bics	r2, r1
 8002256:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69d9      	ldr	r1, [r3, #28]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	61da      	str	r2, [r3, #28]
      break;
 800226a:	e06b      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f000 fb85 	bl	8002984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	0109      	lsls	r1, r1, #4
 8002288:	430a      	orrs	r2, r1
 800228a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4932      	ldr	r1, [pc, #200]	@ (8002360 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002298:	400a      	ands	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69d9      	ldr	r1, [r3, #28]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	021a      	lsls	r2, r3, #8
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	61da      	str	r2, [r3, #28]
      break;
 80022b0:	e048      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	0011      	movs	r1, r2
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fbcc 	bl	8002a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2108      	movs	r1, #8
 80022cc:	430a      	orrs	r2, r1
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2104      	movs	r1, #4
 80022dc:	438a      	bics	r2, r1
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80022f2:	e027      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 fc0b 	bl	8002b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2180      	movs	r1, #128	@ 0x80
 800230e:	0109      	lsls	r1, r1, #4
 8002310:	430a      	orrs	r2, r1
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4910      	ldr	r1, [pc, #64]	@ (8002360 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002320:	400a      	ands	r2, r1
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	021a      	lsls	r2, r3, #8
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002338:	e004      	b.n	8002344 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800233a:	2317      	movs	r3, #23
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
      break;
 8002342:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	223c      	movs	r2, #60	@ 0x3c
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]

  return status;
 800234c:	2317      	movs	r3, #23
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b006      	add	sp, #24
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	08002f10 	.word	0x08002f10
 8002360:	fffffbff 	.word	0xfffffbff

08002364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	230f      	movs	r3, #15
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	223c      	movs	r2, #60	@ 0x3c
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x20>
 8002380:	2302      	movs	r3, #2
 8002382:	e0bc      	b.n	80024fe <HAL_TIM_ConfigClockSource+0x19a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	223c      	movs	r2, #60	@ 0x3c
 8002388:	2101      	movs	r1, #1
 800238a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	223d      	movs	r2, #61	@ 0x3d
 8002390:	2102      	movs	r1, #2
 8002392:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4a5a      	ldr	r2, [pc, #360]	@ (8002508 <HAL_TIM_ConfigClockSource+0x1a4>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4a59      	ldr	r2, [pc, #356]	@ (800250c <HAL_TIM_ConfigClockSource+0x1a8>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2280      	movs	r2, #128	@ 0x80
 80023ba:	0192      	lsls	r2, r2, #6
 80023bc:	4293      	cmp	r3, r2
 80023be:	d040      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0xde>
 80023c0:	2280      	movs	r2, #128	@ 0x80
 80023c2:	0192      	lsls	r2, r2, #6
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d900      	bls.n	80023ca <HAL_TIM_ConfigClockSource+0x66>
 80023c8:	e088      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023ca:	2280      	movs	r2, #128	@ 0x80
 80023cc:	0152      	lsls	r2, r2, #5
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d100      	bne.n	80023d4 <HAL_TIM_ConfigClockSource+0x70>
 80023d2:	e088      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x182>
 80023d4:	2280      	movs	r2, #128	@ 0x80
 80023d6:	0152      	lsls	r2, r2, #5
 80023d8:	4293      	cmp	r3, r2
 80023da:	d900      	bls.n	80023de <HAL_TIM_ConfigClockSource+0x7a>
 80023dc:	e07e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023de:	2b70      	cmp	r3, #112	@ 0x70
 80023e0:	d018      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0xb0>
 80023e2:	d900      	bls.n	80023e6 <HAL_TIM_ConfigClockSource+0x82>
 80023e4:	e07a      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023e6:	2b60      	cmp	r3, #96	@ 0x60
 80023e8:	d04f      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x126>
 80023ea:	d900      	bls.n	80023ee <HAL_TIM_ConfigClockSource+0x8a>
 80023ec:	e076      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023ee:	2b50      	cmp	r3, #80	@ 0x50
 80023f0:	d03b      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x106>
 80023f2:	d900      	bls.n	80023f6 <HAL_TIM_ConfigClockSource+0x92>
 80023f4:	e072      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023f6:	2b40      	cmp	r3, #64	@ 0x40
 80023f8:	d057      	beq.n	80024aa <HAL_TIM_ConfigClockSource+0x146>
 80023fa:	d900      	bls.n	80023fe <HAL_TIM_ConfigClockSource+0x9a>
 80023fc:	e06e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 80023fe:	2b30      	cmp	r3, #48	@ 0x30
 8002400:	d063      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x166>
 8002402:	d86b      	bhi.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 8002404:	2b20      	cmp	r3, #32
 8002406:	d060      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x166>
 8002408:	d868      	bhi.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d05d      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x166>
 800240e:	2b10      	cmp	r3, #16
 8002410:	d05b      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x166>
 8002412:	e063      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002424:	f000 fc58 	bl	8002cd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2277      	movs	r2, #119	@ 0x77
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
      break;
 8002440:	e052      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002452:	f000 fc41 	bl	8002cd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2180      	movs	r1, #128	@ 0x80
 8002462:	01c9      	lsls	r1, r1, #7
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
      break;
 8002468:	e03e      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	001a      	movs	r2, r3
 8002478:	f000 fbb2 	bl	8002be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2150      	movs	r1, #80	@ 0x50
 8002482:	0018      	movs	r0, r3
 8002484:	f000 fc0c 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 8002488:	e02e      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002496:	001a      	movs	r2, r3
 8002498:	f000 fbd0 	bl	8002c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2160      	movs	r1, #96	@ 0x60
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fbfc 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 80024a8:	e01e      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	001a      	movs	r2, r3
 80024b8:	f000 fb92 	bl	8002be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fbec 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 80024c8:	e00e      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0019      	movs	r1, r3
 80024d4:	0010      	movs	r0, r2
 80024d6:	f000 fbe3 	bl	8002ca0 <TIM_ITRx_SetConfig>
      break;
 80024da:	e005      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024dc:	230f      	movs	r3, #15
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
      break;
 80024e4:	e000      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024e6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	223d      	movs	r2, #61	@ 0x3d
 80024ec:	2101      	movs	r1, #1
 80024ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	223c      	movs	r2, #60	@ 0x3c
 80024f4:	2100      	movs	r1, #0
 80024f6:	5499      	strb	r1, [r3, r2]

  return status;
 80024f8:	230f      	movs	r3, #15
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	781b      	ldrb	r3, [r3, #0]
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b004      	add	sp, #16
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	ffceff88 	.word	0xffceff88
 800250c:	ffff00ff 	.word	0xffff00ff

08002510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002518:	46c0      	nop			@ (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002528:	46c0      	nop			@ (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a36      	ldr	r2, [pc, #216]	@ (800263c <TIM_Base_SetConfig+0xec>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d003      	beq.n	8002570 <TIM_Base_SetConfig+0x20>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a35      	ldr	r2, [pc, #212]	@ (8002640 <TIM_Base_SetConfig+0xf0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d108      	bne.n	8002582 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2270      	movs	r2, #112	@ 0x70
 8002574:	4393      	bics	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2d      	ldr	r2, [pc, #180]	@ (800263c <TIM_Base_SetConfig+0xec>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2c      	ldr	r2, [pc, #176]	@ (8002640 <TIM_Base_SetConfig+0xf0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00f      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <TIM_Base_SetConfig+0xf4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00b      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <TIM_Base_SetConfig+0xf8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a29      	ldr	r2, [pc, #164]	@ (800264c <TIM_Base_SetConfig+0xfc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a28      	ldr	r2, [pc, #160]	@ (8002650 <TIM_Base_SetConfig+0x100>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a27      	ldr	r2, [pc, #156]	@ (8002654 <TIM_Base_SetConfig+0x104>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	4393      	bics	r3, r2
 80025ca:	001a      	movs	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a13      	ldr	r2, [pc, #76]	@ (800263c <TIM_Base_SetConfig+0xec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <TIM_Base_SetConfig+0xf8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a13      	ldr	r2, [pc, #76]	@ (800264c <TIM_Base_SetConfig+0xfc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <TIM_Base_SetConfig+0x100>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d103      	bne.n	8002612 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2201      	movs	r2, #1
 800262a:	4393      	bics	r3, r2
 800262c:	001a      	movs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]
  }
}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40002000 	.word	0x40002000
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800
 8002654:	fffffcff 	.word	0xfffffcff

08002658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	2201      	movs	r2, #1
 800266e:	4393      	bics	r3, r2
 8002670:	001a      	movs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4a32      	ldr	r2, [pc, #200]	@ (8002750 <TIM_OC1_SetConfig+0xf8>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2203      	movs	r2, #3
 800268e:	4393      	bics	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2202      	movs	r2, #2
 80026a0:	4393      	bics	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a28      	ldr	r2, [pc, #160]	@ (8002754 <TIM_OC1_SetConfig+0xfc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_OC1_SetConfig+0x76>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a27      	ldr	r2, [pc, #156]	@ (8002758 <TIM_OC1_SetConfig+0x100>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d007      	beq.n	80026ce <TIM_OC1_SetConfig+0x76>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <TIM_OC1_SetConfig+0x104>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_OC1_SetConfig+0x76>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a25      	ldr	r2, [pc, #148]	@ (8002760 <TIM_OC1_SetConfig+0x108>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10c      	bne.n	80026e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2208      	movs	r2, #8
 80026d2:	4393      	bics	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4393      	bics	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <TIM_OC1_SetConfig+0xfc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00b      	beq.n	8002708 <TIM_OC1_SetConfig+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <TIM_OC1_SetConfig+0x100>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_OC1_SetConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a18      	ldr	r2, [pc, #96]	@ (800275c <TIM_OC1_SetConfig+0x104>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_OC1_SetConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <TIM_OC1_SetConfig+0x108>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d111      	bne.n	800272c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4a16      	ldr	r2, [pc, #88]	@ (8002764 <TIM_OC1_SetConfig+0x10c>)
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4a15      	ldr	r2, [pc, #84]	@ (8002768 <TIM_OC1_SetConfig+0x110>)
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	621a      	str	r2, [r3, #32]
}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b006      	add	sp, #24
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	fffeff8f 	.word	0xfffeff8f
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40014000 	.word	0x40014000
 800275c:	40014400 	.word	0x40014400
 8002760:	40014800 	.word	0x40014800
 8002764:	fffffeff 	.word	0xfffffeff
 8002768:	fffffdff 	.word	0xfffffdff

0800276c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	2210      	movs	r2, #16
 8002782:	4393      	bics	r3, r2
 8002784:	001a      	movs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a2e      	ldr	r2, [pc, #184]	@ (8002854 <TIM_OC2_SetConfig+0xe8>)
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002858 <TIM_OC2_SetConfig+0xec>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2220      	movs	r2, #32
 80027b6:	4393      	bics	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a24      	ldr	r2, [pc, #144]	@ (800285c <TIM_OC2_SetConfig+0xf0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d10d      	bne.n	80027ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	4393      	bics	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2240      	movs	r2, #64	@ 0x40
 80027e6:	4393      	bics	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <TIM_OC2_SetConfig+0xf0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_OC2_SetConfig+0x9e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <TIM_OC2_SetConfig+0xf4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_OC2_SetConfig+0x9e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <TIM_OC2_SetConfig+0xf8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_OC2_SetConfig+0x9e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <TIM_OC2_SetConfig+0xfc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d113      	bne.n	8002832 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4a17      	ldr	r2, [pc, #92]	@ (800286c <TIM_OC2_SetConfig+0x100>)
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <TIM_OC2_SetConfig+0x104>)
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bd80      	pop	{r7, pc}
 8002854:	feff8fff 	.word	0xfeff8fff
 8002858:	fffffcff 	.word	0xfffffcff
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40014000 	.word	0x40014000
 8002864:	40014400 	.word	0x40014400
 8002868:	40014800 	.word	0x40014800
 800286c:	fffffbff 	.word	0xfffffbff
 8002870:	fffff7ff 	.word	0xfffff7ff

08002874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <TIM_OC3_SetConfig+0xe4>)
 800288a:	401a      	ands	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4a2f      	ldr	r2, [pc, #188]	@ (800295c <TIM_OC3_SetConfig+0xe8>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2203      	movs	r2, #3
 80028a8:	4393      	bics	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4a29      	ldr	r2, [pc, #164]	@ (8002960 <TIM_OC3_SetConfig+0xec>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <TIM_OC3_SetConfig+0xf0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d10d      	bne.n	80028ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4a24      	ldr	r2, [pc, #144]	@ (8002968 <TIM_OC3_SetConfig+0xf4>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4a20      	ldr	r2, [pc, #128]	@ (800296c <TIM_OC3_SetConfig+0xf8>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <TIM_OC3_SetConfig+0xf0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_OC3_SetConfig+0x9a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002970 <TIM_OC3_SetConfig+0xfc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_OC3_SetConfig+0x9a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <TIM_OC3_SetConfig+0x100>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_OC3_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <TIM_OC3_SetConfig+0x104>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4a1a      	ldr	r2, [pc, #104]	@ (800297c <TIM_OC3_SetConfig+0x108>)
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4a19      	ldr	r2, [pc, #100]	@ (8002980 <TIM_OC3_SetConfig+0x10c>)
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	621a      	str	r2, [r3, #32]
}
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	fffffeff 	.word	0xfffffeff
 800295c:	fffeff8f 	.word	0xfffeff8f
 8002960:	fffffdff 	.word	0xfffffdff
 8002964:	40012c00 	.word	0x40012c00
 8002968:	fffff7ff 	.word	0xfffff7ff
 800296c:	fffffbff 	.word	0xfffffbff
 8002970:	40014000 	.word	0x40014000
 8002974:	40014400 	.word	0x40014400
 8002978:	40014800 	.word	0x40014800
 800297c:	ffffefff 	.word	0xffffefff
 8002980:	ffffdfff 	.word	0xffffdfff

08002984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <TIM_OC4_SetConfig+0xb0>)
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <TIM_OC4_SetConfig+0xb4>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a21      	ldr	r2, [pc, #132]	@ (8002a3c <TIM_OC4_SetConfig+0xb8>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <TIM_OC4_SetConfig+0xbc>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	031b      	lsls	r3, r3, #12
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a19      	ldr	r2, [pc, #100]	@ (8002a44 <TIM_OC4_SetConfig+0xc0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00b      	beq.n	80029fc <TIM_OC4_SetConfig+0x78>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a18      	ldr	r2, [pc, #96]	@ (8002a48 <TIM_OC4_SetConfig+0xc4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_OC4_SetConfig+0x78>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <TIM_OC4_SetConfig+0xc8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_OC4_SetConfig+0x78>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <TIM_OC4_SetConfig+0xcc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d109      	bne.n	8002a10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <TIM_OC4_SetConfig+0xd0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b006      	add	sp, #24
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	ffffefff 	.word	0xffffefff
 8002a38:	feff8fff 	.word	0xfeff8fff
 8002a3c:	fffffcff 	.word	0xfffffcff
 8002a40:	ffffdfff 	.word	0xffffdfff
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	ffffbfff 	.word	0xffffbfff

08002a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <TIM_OC5_SetConfig+0xa4>)
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a1f      	ldr	r2, [pc, #124]	@ (8002b00 <TIM_OC5_SetConfig+0xa8>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <TIM_OC5_SetConfig+0xac>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	041b      	lsls	r3, r3, #16
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <TIM_OC5_SetConfig+0xb0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <TIM_OC5_SetConfig+0x6e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <TIM_OC5_SetConfig+0xb4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <TIM_OC5_SetConfig+0x6e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <TIM_OC5_SetConfig+0xb8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <TIM_OC5_SetConfig+0x6e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <TIM_OC5_SetConfig+0xbc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d109      	bne.n	8002ada <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <TIM_OC5_SetConfig+0xa4>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	621a      	str	r2, [r3, #32]
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b006      	add	sp, #24
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	fffeffff 	.word	0xfffeffff
 8002b00:	fffeff8f 	.word	0xfffeff8f
 8002b04:	fffdffff 	.word	0xfffdffff
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800

08002b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	@ (8002bc0 <TIM_OC6_SetConfig+0xa8>)
 8002b2e:	401a      	ands	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a20      	ldr	r2, [pc, #128]	@ (8002bc4 <TIM_OC6_SetConfig+0xac>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <TIM_OC6_SetConfig+0xb0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	051b      	lsls	r3, r3, #20
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <TIM_OC6_SetConfig+0xb4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <TIM_OC6_SetConfig+0x70>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <TIM_OC6_SetConfig+0xb8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <TIM_OC6_SetConfig+0x70>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <TIM_OC6_SetConfig+0xbc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_OC6_SetConfig+0x70>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a15      	ldr	r2, [pc, #84]	@ (8002bd8 <TIM_OC6_SetConfig+0xc0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d109      	bne.n	8002b9c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <TIM_OC6_SetConfig+0xc4>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b006      	add	sp, #24
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	ffefffff 	.word	0xffefffff
 8002bc4:	feff8fff 	.word	0xfeff8fff
 8002bc8:	ffdfffff 	.word	0xffdfffff
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800
 8002bdc:	fffbffff 	.word	0xfffbffff

08002be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	22f0      	movs	r2, #240	@ 0xf0
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2210      	movs	r2, #16
 8002c54:	4393      	bics	r3, r2
 8002c56:	001a      	movs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <TIM_TI2_ConfigInputStage+0x60>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	031b      	lsls	r3, r3, #12
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	22a0      	movs	r2, #160	@ 0xa0
 8002c78:	4393      	bics	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	621a      	str	r2, [r3, #32]
}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	ffff0fff 	.word	0xffff0fff

08002ca0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a08      	ldr	r2, [pc, #32]	@ (8002cd4 <TIM_ITRx_SetConfig+0x34>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	ffcfff8f 	.word	0xffcfff8f

08002cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <TIM_ETR_SetConfig+0x3c>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	609a      	str	r2, [r3, #8]
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b006      	add	sp, #24
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	ffff00ff 	.word	0xffff00ff

08002d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	221f      	movs	r2, #31
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	43d2      	mvns	r2, r2
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	211f      	movs	r1, #31
 8002d48:	400b      	ands	r3, r1
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4099      	lsls	r1, r3
 8002d4e:	000b      	movs	r3, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b006      	add	sp, #24
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	223c      	movs	r2, #60	@ 0x3c
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e04f      	b.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	223c      	movs	r2, #60	@ 0x3c
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223d      	movs	r2, #61	@ 0x3d
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2270      	movs	r2, #112	@ 0x70
 8002db8:	4393      	bics	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a13      	ldr	r2, [pc, #76]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a12      	ldr	r2, [pc, #72]	@ (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a11      	ldr	r2, [pc, #68]	@ (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d10c      	bne.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2280      	movs	r2, #128	@ 0x80
 8002df0:	4393      	bics	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	223d      	movs	r2, #61	@ 0x3d
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	223c      	movs	r2, #60	@ 0x3c
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b004      	add	sp, #16
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	ff0fffff 	.word	0xff0fffff
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40014000 	.word	0x40014000

08002e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e48:	46c0      	nop			@ (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <memset>:
 8002e60:	0003      	movs	r3, r0
 8002e62:	1882      	adds	r2, r0, r2
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d100      	bne.n	8002e6a <memset+0xa>
 8002e68:	4770      	bx	lr
 8002e6a:	7019      	strb	r1, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	e7f9      	b.n	8002e64 <memset+0x4>

08002e70 <__libc_init_array>:
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	2600      	movs	r6, #0
 8002e74:	4c0c      	ldr	r4, [pc, #48]	@ (8002ea8 <__libc_init_array+0x38>)
 8002e76:	4d0d      	ldr	r5, [pc, #52]	@ (8002eac <__libc_init_array+0x3c>)
 8002e78:	1b64      	subs	r4, r4, r5
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	42a6      	cmp	r6, r4
 8002e7e:	d109      	bne.n	8002e94 <__libc_init_array+0x24>
 8002e80:	2600      	movs	r6, #0
 8002e82:	f000 f819 	bl	8002eb8 <_init>
 8002e86:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb0 <__libc_init_array+0x40>)
 8002e88:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb4 <__libc_init_array+0x44>)
 8002e8a:	1b64      	subs	r4, r4, r5
 8002e8c:	10a4      	asrs	r4, r4, #2
 8002e8e:	42a6      	cmp	r6, r4
 8002e90:	d105      	bne.n	8002e9e <__libc_init_array+0x2e>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	00b3      	lsls	r3, r6, #2
 8002e96:	58eb      	ldr	r3, [r5, r3]
 8002e98:	4798      	blx	r3
 8002e9a:	3601      	adds	r6, #1
 8002e9c:	e7ee      	b.n	8002e7c <__libc_init_array+0xc>
 8002e9e:	00b3      	lsls	r3, r6, #2
 8002ea0:	58eb      	ldr	r3, [r5, r3]
 8002ea2:	4798      	blx	r3
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	e7f2      	b.n	8002e8e <__libc_init_array+0x1e>
 8002ea8:	08002f64 	.word	0x08002f64
 8002eac:	08002f64 	.word	0x08002f64
 8002eb0:	08002f68 	.word	0x08002f68
 8002eb4:	08002f64 	.word	0x08002f64

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
