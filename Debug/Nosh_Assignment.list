
Nosh_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002f48  08002f48  00003f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fdc  08002fdc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002fdc  08002fdc  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002fdc  08002fdc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fdc  08002fdc  00003fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fe0  08002fe0  00003fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002fe4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002ff0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002ff0  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009aee  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c7  00000000  00000000  0000db22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0000f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000834  00000000  00000000  0000ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014879  00000000  00000000  000107c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3a1  00000000  00000000  0002503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084dc3  00000000  00000000  000303de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b51a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000b51e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000b77b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002f30 	.word	0x08002f30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002f30 	.word	0x08002f30

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a31      	ldr	r2, [pc, #196]	@ (80002ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d15b      	bne.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
	{
		HAL_TIM_Base_Stop(&htim6);
 800022a:	4b31      	ldr	r3, [pc, #196]	@ (80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800022c:	0018      	movs	r0, r3
 800022e:	f001 fc81 	bl	8001b34 <HAL_TIM_Base_Stop>
	    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET)
 8000232:	2380      	movs	r3, #128	@ 0x80
 8000234:	019b      	lsls	r3, r3, #6
 8000236:	4a2f      	ldr	r2, [pc, #188]	@ (80002f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000238:	0019      	movs	r1, r3
 800023a:	0010      	movs	r0, r2
 800023c:	f000 fe52 	bl	8000ee4 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	2b01      	cmp	r3, #1
 8000244:	d14d      	bne.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
		{

			//clear button_IT
		    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_PIN_13);
 8000246:	4b2c      	ldr	r3, [pc, #176]	@ (80002f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000248:	2280      	movs	r2, #128	@ 0x80
 800024a:	0192      	lsls	r2, r2, #6
 800024c:	611a      	str	r2, [r3, #16]

			switch(mode)
 800024e:	4b2b      	ldr	r3, [pc, #172]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b03      	cmp	r3, #3
 8000254:	d033      	beq.n	80002be <HAL_TIM_PeriodElapsedCallback+0xa6>
 8000256:	dc44      	bgt.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
 8000258:	2b02      	cmp	r3, #2
 800025a:	d01f      	beq.n	800029c <HAL_TIM_PeriodElapsedCallback+0x84>
 800025c:	dc41      	bgt.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <HAL_TIM_PeriodElapsedCallback+0x50>
 8000262:	2b01      	cmp	r3, #1
 8000264:	d009      	beq.n	800027a <HAL_TIM_PeriodElapsedCallback+0x62>
				mode =0;

			}
		}
	}
}
 8000266:	e03c      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000268:	4b25      	ldr	r3, [pc, #148]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800026a:	2100      	movs	r1, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f001 fd3d 	bl	8001cec <HAL_TIM_PWM_Start>
				mode= 1;
 8000272:	4b22      	ldr	r3, [pc, #136]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000274:	2201      	movs	r2, #1
 8000276:	701a      	strb	r2, [r3, #0]
				break;
 8000278:	e033      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 999);
 800027a:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a21      	ldr	r2, [pc, #132]	@ (8000304 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000280:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000282:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000284:	4a1f      	ldr	r2, [pc, #124]	@ (8000304 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000286:	60da      	str	r2, [r3, #12]
				TIM3->EGR |= TIM_EGR_UG;  // Triggering UPDATE EVENT
 8000288:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800028e:	2101      	movs	r1, #1
 8000290:	430a      	orrs	r2, r1
 8000292:	615a      	str	r2, [r3, #20]
				mode =2;
 8000294:	4b19      	ldr	r3, [pc, #100]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000296:	2202      	movs	r2, #2
 8000298:	701a      	strb	r2, [r3, #0]
				break;
 800029a:	e022      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 1999);
 800029c:	4b18      	ldr	r3, [pc, #96]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1a      	ldr	r2, [pc, #104]	@ (800030c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80002a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002a6:	4a19      	ldr	r2, [pc, #100]	@ (800030c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80002a8:	60da      	str	r2, [r3, #12]
				TIM3->EGR |= TIM_EGR_UG;  // Triggering UPDATE EVENT
 80002aa:	4b17      	ldr	r3, [pc, #92]	@ (8000308 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	4b16      	ldr	r3, [pc, #88]	@ (8000308 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
				mode = 3;
 80002b6:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80002b8:	2203      	movs	r2, #3
 80002ba:	701a      	strb	r2, [r3, #0]
				break;
 80002bc:	e011      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 499);
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	22f4      	movs	r2, #244	@ 0xf4
 80002c4:	32ff      	adds	r2, #255	@ 0xff
 80002c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002ca:	22f4      	movs	r2, #244	@ 0xf4
 80002cc:	32ff      	adds	r2, #255	@ 0xff
 80002ce:	60da      	str	r2, [r3, #12]
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80002d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fded 	bl	8001eb4 <HAL_TIM_PWM_Stop>
				mode =0;
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
}
 80002e0:	e7ff      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0xca>
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b002      	add	sp, #8
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	46c0      	nop			@ (mov r8, r8)
 80002ec:	40001000 	.word	0x40001000
 80002f0:	20000074 	.word	0x20000074
 80002f4:	50000800 	.word	0x50000800
 80002f8:	40021800 	.word	0x40021800
 80002fc:	200000c0 	.word	0x200000c0
 8000300:	20000028 	.word	0x20000028
 8000304:	000003e7 	.word	0x000003e7
 8000308:	40000400 	.word	0x40000400
 800030c:	000007cf 	.word	0x000007cf

08000310 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	0002      	movs	r2, r0
 8000318:	1dbb      	adds	r3, r7, #6
 800031a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_13)
 800031c:	1dbb      	adds	r3, r7, #6
 800031e:	881a      	ldrh	r2, [r3, #0]
 8000320:	2380      	movs	r3, #128	@ 0x80
 8000322:	019b      	lsls	r3, r3, #6
 8000324:	429a      	cmp	r2, r3
 8000326:	d103      	bne.n	8000330 <HAL_GPIO_EXTI_Rising_Callback+0x20>
	{
		//Start TIM 6 for Debouncing
		HAL_TIM_Base_Start_IT(&htim6);
 8000328:	4b03      	ldr	r3, [pc, #12]	@ (8000338 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fc28 	bl	8001b80 <HAL_TIM_Base_Start_IT>
	}
}
 8000330:	46c0      	nop			@ (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000074 	.word	0x20000074

0800033c <LOW_POWER_CLK_CONFIG>:
void LOW_POWER_CLK_CONFIG(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b09f      	sub	sp, #124	@ 0x7c
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_LSI_init_Struct = {0};
 8000342:	2444      	movs	r4, #68	@ 0x44
 8000344:	193b      	adds	r3, r7, r4
 8000346:	0018      	movs	r0, r3
 8000348:	2334      	movs	r3, #52	@ 0x34
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f002 fdc3 	bl	8002ed8 <memset>
  RCC_OscInitTypeDef RCC_HSI_delete_Struct = {0};
 8000352:	2310      	movs	r3, #16
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	0018      	movs	r0, r3
 8000358:	2334      	movs	r3, #52	@ 0x34
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f002 fdbb 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2310      	movs	r3, #16
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f002 fdb4 	bl	8002ed8 <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000370:	2380      	movs	r3, #128	@ 0x80
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fe67 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>

   // Configure the LSI oscillator
  RCC_LSI_init_Struct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2208      	movs	r2, #8
 800037e:	601a      	str	r2, [r3, #0]
  RCC_LSI_init_Struct.LSIState = RCC_LSI_ON;  // Enable LSI
 8000380:	193b      	adds	r3, r7, r4
 8000382:	2201      	movs	r2, #1
 8000384:	619a      	str	r2, [r3, #24]
  RCC_LSI_init_Struct.PLL.PLLState = RCC_PLL_NONE;  // No PLL configuration
 8000386:	193b      	adds	r3, r7, r4
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]

  if (HAL_RCC_OscConfig(&RCC_LSI_init_Struct) != HAL_OK)
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	f000 fede 	bl	8001150 <HAL_RCC_OscConfig>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d003      	beq.n	80003a0 <LOW_POWER_CLK_CONFIG+0x64>
  {
	  Error_Handler();
 8000398:	f000 f9ce 	bl	8000738 <Error_Handler>
  }

  // Wait until LSI is ready
  while (!(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY)))
 800039c:	e000      	b.n	80003a0 <LOW_POWER_CLK_CONFIG+0x64>
  {
      __NOP();  // Wait for LSI to stabilize
 800039e:	46c0      	nop			@ (mov r8, r8)
  while (!(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY)))
 80003a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <LOW_POWER_CLK_CONFIG+0xdc>)
 80003a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003a4:	2202      	movs	r2, #2
 80003a6:	4013      	ands	r3, r2
 80003a8:	d0f9      	beq.n	800039e <LOW_POWER_CLK_CONFIG+0x62>
  }

  //Configue LSI as SYSCLK
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80003aa:	003b      	movs	r3, r7
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_LSI;
 80003b0:	003b      	movs	r3, r7
 80003b2:	2203      	movs	r2, #3
 80003b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	003b      	movs	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	003b      	movs	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 80003c2:	003b      	movs	r3, r7
 80003c4:	2100      	movs	r1, #0
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f9d2 	bl	8001770 <HAL_RCC_ClockConfig>


  //Disabling HSI
  RCC_HSI_delete_Struct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 80003cc:	2110      	movs	r1, #16
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
  RCC_HSI_delete_Struct.HSIState = RCC_HSI_OFF;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  HAL_RCC_OscConfig(&RCC_HSI_delete_Struct);
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 feb7 	bl	8001150 <HAL_RCC_OscConfig>

  // Wait until HSI is off
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY))
 80003e2:	e000      	b.n	80003e6 <LOW_POWER_CLK_CONFIG+0xaa>
  {
      __NOP();
 80003e4:	46c0      	nop			@ (mov r8, r8)
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY))
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <LOW_POWER_CLK_CONFIG+0xdc>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	2380      	movs	r3, #128	@ 0x80
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	4013      	ands	r3, r2
 80003f0:	d1f8      	bne.n	80003e4 <LOW_POWER_CLK_CONFIG+0xa8>
  }

  // MAKE sure PLL is disabled
  RCC->CR &= ~RCC_CR_PLLON;  // Disable PLL
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <LOW_POWER_CLK_CONFIG+0xdc>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <LOW_POWER_CLK_CONFIG+0xdc>)
 80003f8:	4908      	ldr	r1, [pc, #32]	@ (800041c <LOW_POWER_CLK_CONFIG+0xe0>)
 80003fa:	400a      	ands	r2, r1
 80003fc:	601a      	str	r2, [r3, #0]
  while((RCC->CR & RCC_CR_PLLRDY) != 0);  // Wait for PLL to stop
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <LOW_POWER_CLK_CONFIG+0xdc>)
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	2380      	movs	r3, #128	@ 0x80
 8000406:	049b      	lsls	r3, r3, #18
 8000408:	4013      	ands	r3, r2
 800040a:	d1f9      	bne.n	8000400 <LOW_POWER_CLK_CONFIG+0xc4>

  //ENTER Low Power Run Mode
  HAL_PWREx_EnableLowPowerRunMode();
 800040c:	f000 fe5c 	bl	80010c8 <HAL_PWREx_EnableLowPowerRunMode>



}
 8000410:	46c0      	nop			@ (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	b01f      	add	sp, #124	@ 0x7c
 8000416:	bd90      	pop	{r4, r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	feffffff 	.word	0xfeffffff

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000426:	f000 fa87 	bl	8000938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042a:	f000 f823 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042e:	f000 f923 	bl	8000678 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000432:	f000 f867 	bl	8000504 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000436:	f000 f8e5 	bl	8000604 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b0d      	ldr	r3, [pc, #52]	@ (8000470 <main+0x50>)
 800043c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <main+0x50>)
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	0549      	lsls	r1, r1, #21
 8000444:	430a      	orrs	r2, r1
 8000446:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <main+0x50>)
 800044a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	055b      	lsls	r3, r3, #21
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  LOW_POWER_CLK_CONFIG();
 8000456:	f7ff ff71 	bl	800033c <LOW_POWER_CLK_CONFIG>

  HAL_SuspendTick();
 800045a:	f000 faf3 	bl	8000a44 <HAL_SuspendTick>

  HAL_PWR_EnableSleepOnExit();
 800045e:	f000 fde5 	bl	800102c <HAL_PWR_EnableSleepOnExit>

  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000462:	2101      	movs	r1, #1
 8000464:	2000      	movs	r0, #0
 8000466:	f000 fdab 	bl	8000fc0 <HAL_PWR_EnterSLEEPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	e7fd      	b.n	800046a <main+0x4a>
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b093      	sub	sp, #76	@ 0x4c
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	2414      	movs	r4, #20
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2334      	movs	r3, #52	@ 0x34
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f002 fd27 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	0018      	movs	r0, r3
 800048e:	2310      	movs	r3, #16
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f002 fd20 	bl	8002ed8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fdd3 	bl	8001048 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2240      	movs	r2, #64	@ 0x40
 80004ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe43 	bl	8001150 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ce:	f000 f933 	bl	8000738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2100      	movs	r1, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 f93e 	bl	8001770 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f8:	f000 f91e 	bl	8000738 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08e      	sub	sp, #56	@ 0x38
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050a:	2328      	movs	r3, #40	@ 0x28
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	0018      	movs	r0, r3
 8000510:	2310      	movs	r3, #16
 8000512:	001a      	movs	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	f002 fcdf 	bl	8002ed8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051a:	231c      	movs	r3, #28
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	230c      	movs	r3, #12
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f002 fcd7 	bl	8002ed8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052a:	003b      	movs	r3, r7
 800052c:	0018      	movs	r0, r3
 800052e:	231c      	movs	r3, #28
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f002 fcd0 	bl	8002ed8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000538:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <MX_TIM3_Init+0xf8>)
 800053a:	4a31      	ldr	r2, [pc, #196]	@ (8000600 <MX_TIM3_Init+0xfc>)
 800053c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 800053e:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <MX_TIM3_Init+0xf8>)
 8000540:	221f      	movs	r2, #31
 8000542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b2d      	ldr	r3, [pc, #180]	@ (80005fc <MX_TIM3_Init+0xf8>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800054a:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <MX_TIM3_Init+0xf8>)
 800054c:	22f4      	movs	r2, #244	@ 0xf4
 800054e:	32ff      	adds	r2, #255	@ 0xff
 8000550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <MX_TIM3_Init+0xf8>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <MX_TIM3_Init+0xf8>)
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800055e:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <MX_TIM3_Init+0xf8>)
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fa8f 	bl	8001a84 <HAL_TIM_Base_Init>
 8000566:	1e03      	subs	r3, r0, #0
 8000568:	d001      	beq.n	800056e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800056a:	f000 f8e5 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056e:	2128      	movs	r1, #40	@ 0x28
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2280      	movs	r2, #128	@ 0x80
 8000574:	0152      	lsls	r2, r2, #5
 8000576:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000578:	187a      	adds	r2, r7, r1
 800057a:	4b20      	ldr	r3, [pc, #128]	@ (80005fc <MX_TIM3_Init+0xf8>)
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ff2c 	bl	80023dc <HAL_TIM_ConfigClockSource>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000588:	f000 f8d6 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800058c:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <MX_TIM3_Init+0xf8>)
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fb4c 	bl	8001c2c <HAL_TIM_PWM_Init>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000598:	f000 f8ce 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	211c      	movs	r1, #28
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005aa:	187a      	adds	r2, r7, r1
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <MX_TIM3_Init+0xf8>)
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 fc11 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80005ba:	f000 f8bd 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2260      	movs	r2, #96	@ 0x60
 80005c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 249;
 80005c4:	003b      	movs	r3, r7
 80005c6:	22f9      	movs	r2, #249	@ 0xf9
 80005c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d6:	0039      	movs	r1, r7
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <MX_TIM3_Init+0xf8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fdfd 	bl	80021dc <HAL_TIM_PWM_ConfigChannel>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005e6:	f000 f8a7 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ea:	4b04      	ldr	r3, [pc, #16]	@ (80005fc <MX_TIM3_Init+0xf8>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 f907 	bl	8000800 <HAL_TIM_MspPostInit>

}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b00e      	add	sp, #56	@ 0x38
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	20000028 	.word	0x20000028
 8000600:	40000400 	.word	0x40000400

08000604 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	0018      	movs	r0, r3
 800060e:	230c      	movs	r3, #12
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f002 fc60 	bl	8002ed8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_TIM6_Init+0x6c>)
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <MX_TIM6_Init+0x70>)
 800061c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_TIM6_Init+0x6c>)
 8000620:	221f      	movs	r2, #31
 8000622:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_TIM6_Init+0x6c>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_TIM6_Init+0x6c>)
 800062c:	22c7      	movs	r2, #199	@ 0xc7
 800062e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_TIM6_Init+0x6c>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_TIM6_Init+0x6c>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fa23 	bl	8001a84 <HAL_TIM_Base_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000642:	f000 f879 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_TIM6_Init+0x6c>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fbbd 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000662:	f000 f869 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b004      	add	sp, #16
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000074 	.word	0x20000074
 8000674:	40001000 	.word	0x40001000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	@ 0x24
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	240c      	movs	r4, #12
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2314      	movs	r3, #20
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 fc25 	bl	8002ed8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_GPIO_Init+0xb8>)
 8000690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <MX_GPIO_Init+0xb8>)
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	635a      	str	r2, [r3, #52]	@ 0x34
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_GPIO_Init+0xb8>)
 800069c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800069e:	2204      	movs	r2, #4
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_GPIO_Init+0xb8>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <MX_GPIO_Init+0xb8>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_GPIO_Init+0xb8>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006be:	23a0      	movs	r3, #160	@ 0xa0
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fc29 	bl	8000f1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	0192      	lsls	r2, r2, #6
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2288      	movs	r2, #136	@ 0x88
 80006d8:	0352      	lsls	r2, r2, #13
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_GPIO_Init+0xbc>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f000 fa97 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ee:	0021      	movs	r1, r4
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2220      	movs	r2, #32
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2201      	movs	r2, #1
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	187a      	adds	r2, r7, r1
 800070a:	23a0      	movs	r3, #160	@ 0xa0
 800070c:	05db      	lsls	r3, r3, #23
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fa83 	bl	8000c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2007      	movs	r0, #7
 800071c:	f000 fa4c 	bl	8000bb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000720:	2007      	movs	r0, #7
 8000722:	f000 fa5e 	bl	8000be2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b009      	add	sp, #36	@ 0x24
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	40021000 	.word	0x40021000
 8000734:	50000800 	.word	0x50000800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
}
 800073e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e7fd      	b.n	8000740 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <HAL_MspInit+0x44>)
 800074c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_MspInit+0x44>)
 8000750:	2101      	movs	r1, #1
 8000752:	430a      	orrs	r2, r1
 8000754:	641a      	str	r2, [r3, #64]	@ 0x40
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <HAL_MspInit+0x44>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075a:	2201      	movs	r2, #1
 800075c:	4013      	ands	r3, r2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <HAL_MspInit+0x44>)
 8000764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <HAL_MspInit+0x44>)
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0549      	lsls	r1, r1, #21
 800076c:	430a      	orrs	r2, r1
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_MspInit+0x44>)
 8000772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	055b      	lsls	r3, r3, #21
 8000778:	4013      	ands	r3, r2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <HAL_TIM_Base_MspInit+0x68>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d10c      	bne.n	80007b8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a2:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007a4:	2102      	movs	r1, #2
 80007a6:	430a      	orrs	r2, r1
 80007a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ae:	2202      	movs	r2, #2
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007b6:	e018      	b.n	80007ea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <HAL_TIM_Base_MspInit+0x70>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d113      	bne.n	80007ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007c8:	2110      	movs	r1, #16
 80007ca:	430a      	orrs	r2, r1
 80007cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_TIM_Base_MspInit+0x6c>)
 80007d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007d2:	2210      	movs	r2, #16
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2011      	movs	r0, #17
 80007e0:	f000 f9ea 	bl	8000bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80007e4:	2011      	movs	r0, #17
 80007e6:	f000 f9fc 	bl	8000be2 <HAL_NVIC_EnableIRQ>
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40001000 	.word	0x40001000

08000800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	@ 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	240c      	movs	r4, #12
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	2314      	movs	r3, #20
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f002 fb60 	bl	8002ed8 <memset>
  if(htim->Instance==TIM3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <HAL_TIM_MspPostInit+0x70>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d122      	bne.n	8000868 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <HAL_TIM_MspPostInit+0x74>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <HAL_TIM_MspPostInit+0x74>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <HAL_TIM_MspPostInit+0x74>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800083a:	0021      	movs	r1, r4
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2240      	movs	r2, #64	@ 0x40
 8000840:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2201      	movs	r2, #1
 8000858:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	187a      	adds	r2, r7, r1
 800085c:	23a0      	movs	r3, #160	@ 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f9da 	bl	8000c1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b009      	add	sp, #36	@ 0x24
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40000400 	.word	0x40000400
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	46c0      	nop			@ (mov r8, r8)
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8b4 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008ae:	2380      	movs	r3, #128	@ 0x80
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fb50 	bl	8000f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008b8:	46c0      	nop			@ (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <TIM6_IRQHandler+0x14>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fb80 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	20000074 	.word	0x20000074

080008d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	@ (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e8:	f7ff fff6 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ee:	490d      	ldr	r1, [pc, #52]	@ (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a0a      	ldr	r2, [pc, #40]	@ (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000904:	4c0a      	ldr	r4, [pc, #40]	@ (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000912:	f002 fae9 	bl	8002ee8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000916:	f7ff fd83 	bl	8000420 <main>

0800091a <LoopForever>:

LoopForever:
  b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000928:	08002fe4 	.word	0x08002fe4
  ldr r2, =_sbss
 800092c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000930:	200000c8 	.word	0x200000c8

08000934 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC1_IRQHandler>
	...

08000938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <HAL_Init+0x3c>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_Init+0x3c>)
 800094a:	2180      	movs	r1, #128	@ 0x80
 800094c:	0049      	lsls	r1, r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f810 	bl	8000978 <HAL_InitTick>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d003      	beq.n	8000964 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e001      	b.n	8000968 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff feee 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <HAL_InitTick+0x88>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d02b      	beq.n	80009e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_InitTick+0x8c>)
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <HAL_InitTick+0x88>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	0019      	movs	r1, r3
 800099a:	23fa      	movs	r3, #250	@ 0xfa
 800099c:	0098      	lsls	r0, r3, #2
 800099e:	f7ff fbaf 	bl	8000100 <__udivsi3>
 80009a2:	0003      	movs	r3, r0
 80009a4:	0019      	movs	r1, r3
 80009a6:	0020      	movs	r0, r4
 80009a8:	f7ff fbaa 	bl	8000100 <__udivsi3>
 80009ac:	0003      	movs	r3, r0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 f927 	bl	8000c02 <HAL_SYSTICK_Config>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d112      	bne.n	80009de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d80a      	bhi.n	80009d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 f8f6 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_InitTick+0x90>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	e00d      	b.n	80009f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009d4:	230f      	movs	r3, #15
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	e008      	b.n	80009f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009de:	230f      	movs	r3, #15
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e003      	b.n	80009f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	230f      	movs	r3, #15
 80009ea:	18fb      	adds	r3, r7, r3
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009f0:	230f      	movs	r3, #15
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b005      	add	sp, #20
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000c4 	.word	0x200000c4

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	@ (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000a48:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <HAL_SuspendTick+0x18>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <HAL_SuspendTick+0x18>)
 8000a4e:	2102      	movs	r1, #2
 8000a50:	438a      	bics	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a72:	d809      	bhi.n	8000a88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	231f      	movs	r3, #31
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_EnableIRQ+0x30>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	4091      	lsls	r1, r2
 8000a84:	000a      	movs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aa8:	d828      	bhi.n	8000afc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	33c0      	adds	r3, #192	@ 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	589b      	ldr	r3, [r3, r2]
 8000aba:	1dfa      	adds	r2, r7, #7
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	0011      	movs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	00d2      	lsls	r2, r2, #3
 8000ac6:	21ff      	movs	r1, #255	@ 0xff
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	43d2      	mvns	r2, r2
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	019b      	lsls	r3, r3, #6
 8000ad6:	22ff      	movs	r2, #255	@ 0xff
 8000ad8:	401a      	ands	r2, r3
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	4003      	ands	r3, r0
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	481f      	ldr	r0, [pc, #124]	@ (8000b68 <__NVIC_SetPriority+0xd4>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	430a      	orrs	r2, r1
 8000af4:	33c0      	adds	r3, #192	@ 0xc0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afa:	e031      	b.n	8000b60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <__NVIC_SetPriority+0xd8>)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	0019      	movs	r1, r3
 8000b04:	230f      	movs	r3, #15
 8000b06:	400b      	ands	r3, r1
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3306      	adds	r3, #6
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	18d3      	adds	r3, r2, r3
 8000b12:	3304      	adds	r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	@ 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	@ 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <__NVIC_SetPriority+0xd8>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4023      	ands	r3, r4
 8000b50:	3b08      	subs	r3, #8
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	430a      	orrs	r2, r1
 8000b56:	3306      	adds	r3, #6
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	18c3      	adds	r3, r0, r3
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b003      	add	sp, #12
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	045b      	lsls	r3, r3, #17
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d301      	bcc.n	8000b88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b84:	2301      	movs	r3, #1
 8000b86:	e010      	b.n	8000baa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <SysTick_Config+0x44>)
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2103      	movs	r1, #3
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ff7c 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <SysTick_Config+0x44>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <SysTick_Config+0x44>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	1c02      	adds	r2, r0, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	0002      	movs	r2, r0
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff33 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ffaf 	bl	8000b70 <SysTick_Config>
 8000c12:	0003      	movs	r3, r0
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	e147      	b.n	8000ebc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d100      	bne.n	8000c44 <HAL_GPIO_Init+0x28>
 8000c42:	e138      	b.n	8000eb6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d005      	beq.n	8000c5c <HAL_GPIO_Init+0x40>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d130      	bne.n	8000cbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	409a      	lsls	r2, r3
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	43da      	mvns	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	0013      	movs	r3, r2
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c92:	2201      	movs	r2, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	2201      	movs	r2, #1
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d017      	beq.n	8000cfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d123      	bne.n	8000d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	58d3      	ldr	r3, [r2, r3]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2207      	movs	r2, #7
 8000d18:	4013      	ands	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2107      	movs	r1, #7
 8000d32:	400b      	ands	r3, r1
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	08da      	lsrs	r2, r3, #3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	6939      	ldr	r1, [r7, #16]
 8000d4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	23c0      	movs	r3, #192	@ 0xc0
 8000d88:	029b      	lsls	r3, r3, #10
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d100      	bne.n	8000d90 <HAL_GPIO_Init+0x174>
 8000d8e:	e092      	b.n	8000eb6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d90:	4a50      	ldr	r2, [pc, #320]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3318      	adds	r3, #24
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	589b      	ldr	r3, [r3, r2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	220f      	movs	r2, #15
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0x1ca>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a45      	ldr	r2, [pc, #276]	@ (8000ed8 <HAL_GPIO_Init+0x2bc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d00d      	beq.n	8000de2 <HAL_GPIO_Init+0x1c6>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a44      	ldr	r2, [pc, #272]	@ (8000edc <HAL_GPIO_Init+0x2c0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x1c2>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a43      	ldr	r2, [pc, #268]	@ (8000ee0 <HAL_GPIO_Init+0x2c4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d101      	bne.n	8000dda <HAL_GPIO_Init+0x1be>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x1cc>
 8000dda:	2305      	movs	r3, #5
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x1cc>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x1cc>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x1cc>
 8000de6:	2300      	movs	r3, #0
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	2103      	movs	r1, #3
 8000dec:	400a      	ands	r2, r1
 8000dee:	00d2      	lsls	r2, r2, #3
 8000df0:	4093      	lsls	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000df8:	4936      	ldr	r1, [pc, #216]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3318      	adds	r3, #24
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	035b      	lsls	r3, r3, #13
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43da      	mvns	r2, r3
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	039b      	lsls	r3, r3, #14
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e5c:	2384      	movs	r3, #132	@ 0x84
 8000e5e:	58d3      	ldr	r3, [r2, r3]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	43da      	mvns	r2, r3
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e80:	4914      	ldr	r1, [pc, #80]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e82:	2284      	movs	r2, #132	@ 0x84
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e88:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	025b      	lsls	r3, r3, #9
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eae:	4909      	ldr	r1, [pc, #36]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	1e13      	subs	r3, r2, #0
 8000ec6:	d000      	beq.n	8000eca <HAL_GPIO_Init+0x2ae>
 8000ec8:	e6b0      	b.n	8000c2c <HAL_GPIO_Init+0x10>
  }
}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b006      	add	sp, #24
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	50000400 	.word	0x50000400
 8000edc:	50000800 	.word	0x50000800
 8000ee0:	50000c00 	.word	0x50000c00

08000ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	000a      	movs	r2, r1
 8000eee:	1cbb      	adds	r3, r7, #2
 8000ef0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	1cba      	adds	r2, r7, #2
 8000ef8:	8812      	ldrh	r2, [r2, #0]
 8000efa:	4013      	ands	r3, r2
 8000efc:	d004      	beq.n	8000f08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	781b      	ldrb	r3, [r3, #0]
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	0008      	movs	r0, r1
 8000f28:	0011      	movs	r1, r2
 8000f2a:	1cbb      	adds	r3, r7, #2
 8000f2c:	1c02      	adds	r2, r0, #0
 8000f2e:	801a      	strh	r2, [r3, #0]
 8000f30:	1c7b      	adds	r3, r7, #1
 8000f32:	1c0a      	adds	r2, r1, #0
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f36:	1c7b      	adds	r3, r7, #1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d004      	beq.n	8000f48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3e:	1cbb      	adds	r3, r7, #2
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f46:	e003      	b.n	8000f50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	1dbb      	adds	r3, r7, #6
 8000f62:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	1dba      	adds	r2, r7, #6
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d008      	beq.n	8000f82 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f72:	1dba      	adds	r2, r7, #6
 8000f74:	8812      	ldrh	r2, [r2, #0]
 8000f76:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff f9c7 	bl	8000310 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	1dba      	adds	r2, r7, #6
 8000f88:	8812      	ldrh	r2, [r2, #0]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d008      	beq.n	8000fa0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000f90:	1dba      	adds	r2, r7, #6
 8000f92:	8812      	ldrh	r2, [r2, #0]
 8000f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f806 	bl	8000fac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021800 	.word	0x40021800

08000fac <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d10c      	bne.n	8000ffa <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8000fe0:	f000 f872 	bl	80010c8 <HAL_PWREx_EnableLowPowerRunMode>
 8000fe4:	e009      	b.n	8000ffa <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_PWR_EnterSLEEPMode+0x64>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8000ff2:	f000 f877 	bl	80010e4 <HAL_PWREx_DisableLowPowerRunMode>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_PWR_EnterSLEEPMode+0x68>)
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_PWR_EnterSLEEPMode+0x68>)
 8001000:	2104      	movs	r1, #4
 8001002:	438a      	bics	r2, r1
 8001004:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800100e:	bf30      	wfi
 8001010:	e004      	b.n	800101c <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001012:	bf40      	sev
    __WFE();
 8001014:	bf20      	wfe
    __WFE();
 8001016:	bf20      	wfe
 8001018:	e000      	b.n	800101c <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 800101a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	40007000 	.word	0x40007000
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <HAL_PWR_EnableSleepOnExit>:
  *         useful when the processor is expected to run only on interruptions
  *         handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001036:	2102      	movs	r1, #2
 8001038:	430a      	orrs	r2, r1
 800103a:	611a      	str	r2, [r3, #16]
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001056:	4013      	ands	r3, r2
 8001058:	0019      	movs	r1, r3
 800105a:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	429a      	cmp	r2, r3
 800106a:	d11f      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	0013      	movs	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	189b      	adds	r3, r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4912      	ldr	r1, [pc, #72]	@ (80010c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff f840 	bl	8000100 <__udivsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001086:	e008      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e001      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e009      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	401a      	ands	r2, r3
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d0ed      	beq.n	8001088 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b004      	add	sp, #16
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	40007000 	.word	0x40007000
 80010bc:	fffff9ff 	.word	0xfffff9ff
 80010c0:	20000000 	.word	0x20000000
 80010c4:	000f4240 	.word	0x000f4240

080010c8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b03      	ldr	r3, [pc, #12]	@ (80010e0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80010d2:	2180      	movs	r1, #128	@ 0x80
 80010d4:	01c9      	lsls	r1, r1, #7
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	0013      	movs	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	189b      	adds	r3, r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4913      	ldr	r1, [pc, #76]	@ (8001144 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff f801 	bl	8000100 <__udivsi3>
 80010fe:	0003      	movs	r3, r0
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001104:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800110a:	4910      	ldr	r1, [pc, #64]	@ (800114c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001110:	e008      	b.n	8001124 <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e001      	b.n	8001124 <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e009      	b.n	8001138 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	401a      	ands	r2, r3
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	429a      	cmp	r2, r3
 8001134:	d0ed      	beq.n	8001112 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	000f4240 	.word	0x000f4240
 8001148:	40007000 	.word	0x40007000
 800114c:	ffffbfff 	.word	0xffffbfff

08001150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e2f3      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2201      	movs	r2, #1
 8001168:	4013      	ands	r3, r2
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x1e>
 800116c:	e07c      	b.n	8001268 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116e:	4bc3      	ldr	r3, [pc, #780]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2238      	movs	r2, #56	@ 0x38
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001178:	4bc0      	ldr	r3, [pc, #768]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b10      	cmp	r3, #16
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x3e>
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d002      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	2b08      	cmp	r3, #8
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4bb9      	ldr	r3, [pc, #740]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	d062      	beq.n	8001266 <HAL_RCC_OscConfig+0x116>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d15e      	bne.n	8001266 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e2ce      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	025b      	lsls	r3, r3, #9
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_OscConfig+0x78>
 80011b8:	4bb0      	ldr	r3, [pc, #704]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4baf      	ldr	r3, [pc, #700]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	0249      	lsls	r1, r1, #9
 80011c2:	430a      	orrs	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e020      	b.n	800120a <HAL_RCC_OscConfig+0xba>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	23a0      	movs	r3, #160	@ 0xa0
 80011ce:	02db      	lsls	r3, r3, #11
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d10e      	bne.n	80011f2 <HAL_RCC_OscConfig+0xa2>
 80011d4:	4ba9      	ldr	r3, [pc, #676]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4ba8      	ldr	r3, [pc, #672]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011da:	2180      	movs	r1, #128	@ 0x80
 80011dc:	02c9      	lsls	r1, r1, #11
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	4ba6      	ldr	r3, [pc, #664]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba5      	ldr	r3, [pc, #660]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011e8:	2180      	movs	r1, #128	@ 0x80
 80011ea:	0249      	lsls	r1, r1, #9
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e00b      	b.n	800120a <HAL_RCC_OscConfig+0xba>
 80011f2:	4ba2      	ldr	r3, [pc, #648]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4ba1      	ldr	r3, [pc, #644]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80011f8:	49a1      	ldr	r1, [pc, #644]	@ (8001480 <HAL_RCC_OscConfig+0x330>)
 80011fa:	400a      	ands	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4b9f      	ldr	r3, [pc, #636]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b9e      	ldr	r3, [pc, #632]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001204:	499f      	ldr	r1, [pc, #636]	@ (8001484 <HAL_RCC_OscConfig+0x334>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d014      	beq.n	800123c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff fc0d 	bl	8000a30 <HAL_GetTick>
 8001216:	0003      	movs	r3, r0
 8001218:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc08 	bl	8000a30 <HAL_GetTick>
 8001220:	0002      	movs	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	@ 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e28d      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122e:	4b93      	ldr	r3, [pc, #588]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	029b      	lsls	r3, r3, #10
 8001236:	4013      	ands	r3, r2
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0xcc>
 800123a:	e015      	b.n	8001268 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fbf8 	bl	8000a30 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001246:	f7ff fbf3 	bl	8000a30 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b64      	cmp	r3, #100	@ 0x64
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e278      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001258:	4b88      	ldr	r3, [pc, #544]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	029b      	lsls	r3, r3, #10
 8001260:	4013      	ands	r3, r2
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0xf6>
 8001264:	e000      	b.n	8001268 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001266:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d100      	bne.n	8001274 <HAL_RCC_OscConfig+0x124>
 8001272:	e099      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001274:	4b81      	ldr	r3, [pc, #516]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2238      	movs	r2, #56	@ 0x38
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127e:	4b7f      	ldr	r3, [pc, #508]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2203      	movs	r2, #3
 8001284:	4013      	ands	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b10      	cmp	r3, #16
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x144>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d002      	beq.n	800129a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d135      	bne.n	8001306 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129a:	4b78      	ldr	r3, [pc, #480]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	@ 0x80
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x162>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e24b      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b72      	ldr	r3, [pc, #456]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a74      	ldr	r2, [pc, #464]	@ (8001488 <HAL_RCC_OscConfig+0x338>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	021a      	lsls	r2, r3, #8
 80012c2:	4b6e      	ldr	r3, [pc, #440]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012ce:	4b6b      	ldr	r3, [pc, #428]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6e      	ldr	r2, [pc, #440]	@ (800148c <HAL_RCC_OscConfig+0x33c>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	4b67      	ldr	r3, [pc, #412]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012e2:	4b66      	ldr	r3, [pc, #408]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0adb      	lsrs	r3, r3, #11
 80012e8:	2207      	movs	r2, #7
 80012ea:	4013      	ands	r3, r2
 80012ec:	4a68      	ldr	r2, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x340>)
 80012ee:	40da      	lsrs	r2, r3
 80012f0:	4b68      	ldr	r3, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x344>)
 80012f2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <HAL_RCC_OscConfig+0x348>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fb3d 	bl	8000978 <HAL_InitTick>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d051      	beq.n	80013a6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e221      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d030      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800130e:	4b5b      	ldr	r3, [pc, #364]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a5e      	ldr	r2, [pc, #376]	@ (800148c <HAL_RCC_OscConfig+0x33c>)
 8001314:	4013      	ands	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	4b57      	ldr	r3, [pc, #348]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001322:	4b56      	ldr	r3, [pc, #344]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b55      	ldr	r3, [pc, #340]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	0049      	lsls	r1, r1, #1
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fb7e 	bl	8000a30 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fb79 	bl	8000a30 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e1fe      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001358:	4b48      	ldr	r3, [pc, #288]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a4a      	ldr	r2, [pc, #296]	@ (8001488 <HAL_RCC_OscConfig+0x338>)
 800135e:	4013      	ands	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	021a      	lsls	r2, r3, #8
 8001368:	4b44      	ldr	r3, [pc, #272]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800136a:	430a      	orrs	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001370:	4b42      	ldr	r3, [pc, #264]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001376:	4949      	ldr	r1, [pc, #292]	@ (800149c <HAL_RCC_OscConfig+0x34c>)
 8001378:	400a      	ands	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fb58 	bl	8000a30 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb53 	bl	8000a30 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1d8      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001398:	4b38      	ldr	r3, [pc, #224]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x236>
 80013a4:	e000      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2208      	movs	r2, #8
 80013ae:	4013      	ands	r3, r2
 80013b0:	d047      	beq.n	8001442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2238      	movs	r2, #56	@ 0x38
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b18      	cmp	r3, #24
 80013bc:	d10a      	bne.n	80013d4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	2202      	movs	r2, #2
 80013c4:	4013      	ands	r3, r2
 80013c6:	d03c      	beq.n	8001442 <HAL_RCC_OscConfig+0x2f2>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d138      	bne.n	8001442 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e1ba      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d019      	beq.n	8001410 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80013de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb22 	bl	8000a30 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f2:	f7ff fb1d 	bl	8000a30 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a2      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001404:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d0f1      	beq.n	80013f2 <HAL_RCC_OscConfig+0x2a2>
 800140e:	e018      	b.n	8001442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001412:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fb08 	bl	8000a30 <HAL_GetTick>
 8001420:	0003      	movs	r3, r0
 8001422:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001426:	f7ff fb03 	bl	8000a30 <HAL_GetTick>
 800142a:	0002      	movs	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e188      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001438:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143c:	2202      	movs	r2, #2
 800143e:	4013      	ands	r3, r2
 8001440:	d1f1      	bne.n	8001426 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d100      	bne.n	800144e <HAL_RCC_OscConfig+0x2fe>
 800144c:	e0c6      	b.n	80015dc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	231f      	movs	r3, #31
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2238      	movs	r2, #56	@ 0x38
 800145c:	4013      	ands	r3, r2
 800145e:	2b20      	cmp	r3, #32
 8001460:	d11e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_RCC_OscConfig+0x32c>)
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x31e>
 800146c:	e0b6      	b.n	80015dc <HAL_RCC_OscConfig+0x48c>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d000      	beq.n	8001478 <HAL_RCC_OscConfig+0x328>
 8001476:	e0b1      	b.n	80015dc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e166      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
 800147c:	40021000 	.word	0x40021000
 8001480:	fffeffff 	.word	0xfffeffff
 8001484:	fffbffff 	.word	0xfffbffff
 8001488:	ffff80ff 	.word	0xffff80ff
 800148c:	ffffc7ff 	.word	0xffffc7ff
 8001490:	00f42400 	.word	0x00f42400
 8001494:	20000000 	.word	0x20000000
 8001498:	20000004 	.word	0x20000004
 800149c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014a0:	4bac      	ldr	r3, [pc, #688]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80014a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	055b      	lsls	r3, r3, #21
 80014a8:	4013      	ands	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x360>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x362>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d011      	beq.n	80014da <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4ba7      	ldr	r3, [pc, #668]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80014b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ba:	4ba6      	ldr	r3, [pc, #664]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80014bc:	2180      	movs	r1, #128	@ 0x80
 80014be:	0549      	lsls	r1, r1, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c4:	4ba3      	ldr	r3, [pc, #652]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80014c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	055b      	lsls	r3, r3, #21
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014d2:	231f      	movs	r3, #31
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014da:	4b9f      	ldr	r3, [pc, #636]	@ (8001758 <HAL_RCC_OscConfig+0x608>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	2380      	movs	r3, #128	@ 0x80
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	d11a      	bne.n	800151c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e6:	4b9c      	ldr	r3, [pc, #624]	@ (8001758 <HAL_RCC_OscConfig+0x608>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b9b      	ldr	r3, [pc, #620]	@ (8001758 <HAL_RCC_OscConfig+0x608>)
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	0049      	lsls	r1, r1, #1
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa9c 	bl	8000a30 <HAL_GetTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff fa97 	bl	8000a30 <HAL_GetTick>
 8001502:	0002      	movs	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e11c      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001510:	4b91      	ldr	r3, [pc, #580]	@ (8001758 <HAL_RCC_OscConfig+0x608>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4013      	ands	r3, r2
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x3e2>
 8001524:	4b8b      	ldr	r3, [pc, #556]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001528:	4b8a      	ldr	r3, [pc, #552]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x41c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x404>
 800153a:	4b86      	ldr	r3, [pc, #536]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800153c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800153e:	4b85      	ldr	r3, [pc, #532]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001540:	2104      	movs	r1, #4
 8001542:	430a      	orrs	r2, r1
 8001544:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001546:	4b83      	ldr	r3, [pc, #524]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800154a:	4b82      	ldr	r3, [pc, #520]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0x41c>
 8001554:	4b7f      	ldr	r3, [pc, #508]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001558:	4b7e      	ldr	r3, [pc, #504]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800155a:	2101      	movs	r1, #1
 800155c:	438a      	bics	r2, r1
 800155e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001560:	4b7c      	ldr	r3, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001562:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001564:	4b7b      	ldr	r3, [pc, #492]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001566:	2104      	movs	r1, #4
 8001568:	438a      	bics	r2, r1
 800156a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d014      	beq.n	800159e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fa5c 	bl	8000a30 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157c:	e009      	b.n	8001592 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fa57 	bl	8000a30 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a74      	ldr	r2, [pc, #464]	@ (800175c <HAL_RCC_OscConfig+0x60c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0db      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	4b70      	ldr	r3, [pc, #448]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x42e>
 800159c:	e013      	b.n	80015c6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fa47 	bl	8000a30 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a6:	e009      	b.n	80015bc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fa42 	bl	8000a30 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a6a      	ldr	r2, [pc, #424]	@ (800175c <HAL_RCC_OscConfig+0x60c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0c6      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015bc:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80015be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015c6:	231f      	movs	r3, #31
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015d0:	4b60      	ldr	r3, [pc, #384]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80015d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80015d6:	4962      	ldr	r1, [pc, #392]	@ (8001760 <HAL_RCC_OscConfig+0x610>)
 80015d8:	400a      	ands	r2, r1
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x496>
 80015e4:	e0b0      	b.n	8001748 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2238      	movs	r2, #56	@ 0x38
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4a4>
 80015f2:	e078      	b.n	80016e6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d153      	bne.n	80016a4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b55      	ldr	r3, [pc, #340]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b54      	ldr	r3, [pc, #336]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001602:	4958      	ldr	r1, [pc, #352]	@ (8001764 <HAL_RCC_OscConfig+0x614>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fa12 	bl	8000a30 <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fa0d 	bl	8000a30 <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e092      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001624:	4b4b      	ldr	r3, [pc, #300]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	049b      	lsls	r3, r3, #18
 800162c:	4013      	ands	r3, r2
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001630:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_RCC_OscConfig+0x618>)
 8001636:	4013      	ands	r3, r2
 8001638:	0019      	movs	r1, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1a      	ldr	r2, [r3, #32]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	431a      	orrs	r2, r3
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165e:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	0449      	lsls	r1, r1, #17
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001672:	2180      	movs	r1, #128	@ 0x80
 8001674:	0549      	lsls	r1, r1, #21
 8001676:	430a      	orrs	r2, r1
 8001678:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff f9d9 	bl	8000a30 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f9d4 	bl	8000a30 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e059      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x534>
 80016a2:	e051      	b.n	8001748 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016aa:	492e      	ldr	r1, [pc, #184]	@ (8001764 <HAL_RCC_OscConfig+0x614>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f9be 	bl	8000a30 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f9b9 	bl	8000a30 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03e      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	049b      	lsls	r3, r3, #18
 80016d4:	4013      	ands	r3, r2
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016de:	4923      	ldr	r1, [pc, #140]	@ (800176c <HAL_RCC_OscConfig+0x61c>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e030      	b.n	8001748 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e02b      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016f2:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_RCC_OscConfig+0x604>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2203      	movs	r2, #3
 80016fc:	401a      	ands	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	429a      	cmp	r2, r3
 8001704:	d11e      	bne.n	8001744 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2270      	movs	r2, #112	@ 0x70
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d117      	bne.n	8001744 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	23fe      	movs	r3, #254	@ 0xfe
 8001718:	01db      	lsls	r3, r3, #7
 800171a:	401a      	ands	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d10e      	bne.n	8001744 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	23f8      	movs	r3, #248	@ 0xf8
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	0f5b      	lsrs	r3, r3, #29
 800173a:	075a      	lsls	r2, r3, #29
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b008      	add	sp, #32
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	40021000 	.word	0x40021000
 8001758:	40007000 	.word	0x40007000
 800175c:	00001388 	.word	0x00001388
 8001760:	efffffff 	.word	0xefffffff
 8001764:	feffffff 	.word	0xfeffffff
 8001768:	1fc1808c 	.word	0x1fc1808c
 800176c:	effefffc 	.word	0xeffefffc

08001770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0e9      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2207      	movs	r2, #7
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d91e      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b73      	ldr	r3, [pc, #460]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2207      	movs	r2, #7
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	4b70      	ldr	r3, [pc, #448]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017a4:	f7ff f944 	bl	8000a30 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ac:	e009      	b.n	80017c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ae:	f7ff f93f 	bl	8000a30 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <HAL_RCC_ClockConfig+0x1f4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0ca      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2207      	movs	r2, #7
 80017c8:	4013      	ands	r3, r2
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1ee      	bne.n	80017ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2204      	movs	r2, #4
 80017e0:	4013      	ands	r3, r2
 80017e2:	d006      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017e4:	4b60      	ldr	r3, [pc, #384]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	21e0      	movs	r1, #224	@ 0xe0
 80017ec:	01c9      	lsls	r1, r1, #7
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	4a5d      	ldr	r2, [pc, #372]	@ (800196c <HAL_RCC_ClockConfig+0x1fc>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d057      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d12b      	bne.n	800187c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e097      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	049b      	lsls	r3, r3, #18
 8001838:	4013      	ands	r3, r2
 800183a:	d11f      	bne.n	800187c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e08b      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001848:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4013      	ands	r3, r2
 8001852:	d113      	bne.n	800187c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e07f      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d106      	bne.n	800186e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001860:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d108      	bne.n	800187c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e074      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186e:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e06d      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800187c:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2207      	movs	r2, #7
 8001882:	4393      	bics	r3, r2
 8001884:	0019      	movs	r1, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001890:	f7ff f8ce 	bl	8000a30 <HAL_GetTick>
 8001894:	0003      	movs	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001898:	e009      	b.n	80018ae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189a:	f7ff f8c9 	bl	8000a30 <HAL_GetTick>
 800189e:	0002      	movs	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001964 <HAL_RCC_ClockConfig+0x1f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e054      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2238      	movs	r2, #56	@ 0x38
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ec      	bne.n	800189a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2207      	movs	r2, #7
 80018c6:	4013      	ands	r3, r2
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d21e      	bcs.n	800190c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2207      	movs	r2, #7
 80018d4:	4393      	bics	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018e0:	f7ff f8a6 	bl	8000a30 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e8:	e009      	b.n	80018fe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ea:	f7ff f8a1 	bl	8000a30 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <HAL_RCC_ClockConfig+0x1f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e02c      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018fe:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2207      	movs	r2, #7
 8001904:	4013      	ands	r3, r2
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4a15      	ldr	r2, [pc, #84]	@ (8001970 <HAL_RCC_ClockConfig+0x200>)
 800191c:	4013      	ands	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800192a:	f000 f829 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800192e:	0001      	movs	r1, r0
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	220f      	movs	r2, #15
 8001938:	401a      	ands	r2, r3
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_RCC_ClockConfig+0x204>)
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	58d3      	ldr	r3, [r2, r3]
 8001940:	221f      	movs	r2, #31
 8001942:	4013      	ands	r3, r2
 8001944:	000a      	movs	r2, r1
 8001946:	40da      	lsrs	r2, r3
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_ClockConfig+0x208>)
 800194a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_ClockConfig+0x20c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff f811 	bl	8000978 <HAL_InitTick>
 8001956:	0003      	movs	r3, r0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b004      	add	sp, #16
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40022000 	.word	0x40022000
 8001964:	00001388 	.word	0x00001388
 8001968:	40021000 	.word	0x40021000
 800196c:	fffff0ff 	.word	0xfffff0ff
 8001970:	ffff8fff 	.word	0xffff8fff
 8001974:	08002f48 	.word	0x08002f48
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2238      	movs	r2, #56	@ 0x38
 800198c:	4013      	ands	r3, r2
 800198e:	d10f      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0adb      	lsrs	r3, r3, #11
 8001996:	2207      	movs	r2, #7
 8001998:	4013      	ands	r3, r2
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	4835      	ldr	r0, [pc, #212]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a6:	f7fe fbab 	bl	8000100 <__udivsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e05d      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2238      	movs	r2, #56	@ 0x38
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019bc:	4b30      	ldr	r3, [pc, #192]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x100>)
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	e054      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2238      	movs	r2, #56	@ 0x38
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d138      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2203      	movs	r2, #3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	3301      	adds	r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d10d      	bne.n	8001a08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4824      	ldr	r0, [pc, #144]	@ (8001a80 <HAL_RCC_GetSysClockFreq+0x100>)
 80019f0:	f7fe fb86 	bl	8000100 <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	0019      	movs	r1, r3
 80019f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	227f      	movs	r2, #127	@ 0x7f
 8001a00:	4013      	ands	r3, r2
 8001a02:	434b      	muls	r3, r1
 8001a04:	617b      	str	r3, [r7, #20]
        break;
 8001a06:	e00d      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	481c      	ldr	r0, [pc, #112]	@ (8001a7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a0c:	f7fe fb78 	bl	8000100 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	0019      	movs	r1, r3
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	227f      	movs	r2, #127	@ 0x7f
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	434b      	muls	r3, r1
 8001a20:	617b      	str	r3, [r7, #20]
        break;
 8001a22:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0f5b      	lsrs	r3, r3, #29
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	3301      	adds	r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f7fe fb63 	bl	8000100 <__udivsi3>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e015      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2238      	movs	r2, #56	@ 0x38
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d103      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2238      	movs	r2, #56	@ 0x38
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b18      	cmp	r3, #24
 8001a5e:	d103      	bne.n	8001a68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a60:	23fa      	movs	r3, #250	@ 0xfa
 8001a62:	01db      	lsls	r3, r3, #7
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	e001      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a6c:	693b      	ldr	r3, [r7, #16]
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b006      	add	sp, #24
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e04a      	b.n	8001b2c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	223d      	movs	r2, #61	@ 0x3d
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223c      	movs	r2, #60	@ 0x3c
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7fe fe6d 	bl	800078c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	223d      	movs	r2, #61	@ 0x3d
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f000 fd7f 	bl	80025c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2248      	movs	r2, #72	@ 0x48
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223e      	movs	r2, #62	@ 0x3e
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223f      	movs	r2, #63	@ 0x3f
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2240      	movs	r2, #64	@ 0x40
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2241      	movs	r2, #65	@ 0x41
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2242      	movs	r2, #66	@ 0x42
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2243      	movs	r2, #67	@ 0x43
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2244      	movs	r2, #68	@ 0x44
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2245      	movs	r2, #69	@ 0x45
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2246      	movs	r2, #70	@ 0x46
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2247      	movs	r2, #71	@ 0x47
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	223d      	movs	r2, #61	@ 0x3d
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b002      	add	sp, #8
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <HAL_TIM_Base_Stop+0x44>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	d10d      	bne.n	8001b64 <HAL_TIM_Base_Stop+0x30>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b7c <HAL_TIM_Base_Stop+0x48>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	d107      	bne.n	8001b64 <HAL_TIM_Base_Stop+0x30>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	223d      	movs	r2, #61	@ 0x3d
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b002      	add	sp, #8
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	00001111 	.word	0x00001111
 8001b7c:	00000444 	.word	0x00000444

08001b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	223d      	movs	r2, #61	@ 0x3d
 8001b8c:	5c9b      	ldrb	r3, [r3, r2]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d001      	beq.n	8001b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e03c      	b.n	8001c12 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223d      	movs	r2, #61	@ 0x3d
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <HAL_TIM_Base_Start_IT+0x9c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x4e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a18      	ldr	r2, [pc, #96]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xa0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_TIM_Base_Start_IT+0x4e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a16      	ldr	r2, [pc, #88]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xa4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d116      	bne.n	8001bfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xa8>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b06      	cmp	r3, #6
 8001bde:	d016      	beq.n	8001c0e <HAL_TIM_Base_Start_IT+0x8e>
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	025b      	lsls	r3, r3, #9
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d011      	beq.n	8001c0e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	e008      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e000      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b004      	add	sp, #16
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40014000 	.word	0x40014000
 8001c28:	00010007 	.word	0x00010007

08001c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e04a      	b.n	8001cd4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	223d      	movs	r2, #61	@ 0x3d
 8001c42:	5c9b      	ldrb	r3, [r3, r2]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	223c      	movs	r2, #60	@ 0x3c
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 f841 	bl	8001cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	223d      	movs	r2, #61	@ 0x3d
 8001c5e:	2102      	movs	r1, #2
 8001c60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f000 fcab 	bl	80025c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2248      	movs	r2, #72	@ 0x48
 8001c76:	2101      	movs	r1, #1
 8001c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	223e      	movs	r2, #62	@ 0x3e
 8001c7e:	2101      	movs	r1, #1
 8001c80:	5499      	strb	r1, [r3, r2]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	223f      	movs	r2, #63	@ 0x3f
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2240      	movs	r2, #64	@ 0x40
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2241      	movs	r2, #65	@ 0x41
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2242      	movs	r2, #66	@ 0x42
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	5499      	strb	r1, [r3, r2]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2243      	movs	r2, #67	@ 0x43
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2244      	movs	r2, #68	@ 0x44
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2245      	movs	r2, #69	@ 0x45
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2246      	movs	r2, #70	@ 0x46
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2247      	movs	r2, #71	@ 0x47
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223d      	movs	r2, #61	@ 0x3d
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b002      	add	sp, #8
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d108      	bne.n	8001d0e <HAL_TIM_PWM_Start+0x22>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	223e      	movs	r2, #62	@ 0x3e
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	4193      	sbcs	r3, r2
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e037      	b.n	8001d7e <HAL_TIM_PWM_Start+0x92>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d108      	bne.n	8001d26 <HAL_TIM_PWM_Start+0x3a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	223f      	movs	r2, #63	@ 0x3f
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	4193      	sbcs	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	e02b      	b.n	8001d7e <HAL_TIM_PWM_Start+0x92>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d108      	bne.n	8001d3e <HAL_TIM_PWM_Start+0x52>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	5c9b      	ldrb	r3, [r3, r2]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	1e5a      	subs	r2, r3, #1
 8001d38:	4193      	sbcs	r3, r2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	e01f      	b.n	8001d7e <HAL_TIM_PWM_Start+0x92>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d108      	bne.n	8001d56 <HAL_TIM_PWM_Start+0x6a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2241      	movs	r2, #65	@ 0x41
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	4193      	sbcs	r3, r2
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e013      	b.n	8001d7e <HAL_TIM_PWM_Start+0x92>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d108      	bne.n	8001d6e <HAL_TIM_PWM_Start+0x82>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2242      	movs	r2, #66	@ 0x42
 8001d60:	5c9b      	ldrb	r3, [r3, r2]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	4193      	sbcs	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	e007      	b.n	8001d7e <HAL_TIM_PWM_Start+0x92>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2243      	movs	r2, #67	@ 0x43
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	1e5a      	subs	r2, r3, #1
 8001d7a:	4193      	sbcs	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e085      	b.n	8001e92 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d104      	bne.n	8001d96 <HAL_TIM_PWM_Start+0xaa>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	223e      	movs	r2, #62	@ 0x3e
 8001d90:	2102      	movs	r1, #2
 8001d92:	5499      	strb	r1, [r3, r2]
 8001d94:	e023      	b.n	8001dde <HAL_TIM_PWM_Start+0xf2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d104      	bne.n	8001da6 <HAL_TIM_PWM_Start+0xba>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	223f      	movs	r2, #63	@ 0x3f
 8001da0:	2102      	movs	r1, #2
 8001da2:	5499      	strb	r1, [r3, r2]
 8001da4:	e01b      	b.n	8001dde <HAL_TIM_PWM_Start+0xf2>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d104      	bne.n	8001db6 <HAL_TIM_PWM_Start+0xca>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2240      	movs	r2, #64	@ 0x40
 8001db0:	2102      	movs	r1, #2
 8001db2:	5499      	strb	r1, [r3, r2]
 8001db4:	e013      	b.n	8001dde <HAL_TIM_PWM_Start+0xf2>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d104      	bne.n	8001dc6 <HAL_TIM_PWM_Start+0xda>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2241      	movs	r2, #65	@ 0x41
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	5499      	strb	r1, [r3, r2]
 8001dc4:	e00b      	b.n	8001dde <HAL_TIM_PWM_Start+0xf2>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d104      	bne.n	8001dd6 <HAL_TIM_PWM_Start+0xea>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2242      	movs	r2, #66	@ 0x42
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	5499      	strb	r1, [r3, r2]
 8001dd4:	e003      	b.n	8001dde <HAL_TIM_PWM_Start+0xf2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2243      	movs	r2, #67	@ 0x43
 8001dda:	2102      	movs	r1, #2
 8001ddc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 ffd2 	bl	8002d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e9c <HAL_TIM_PWM_Start+0x1b0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_TIM_PWM_Start+0x128>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ea0 <HAL_TIM_PWM_Start+0x1b4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_TIM_PWM_Start+0x128>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a27      	ldr	r2, [pc, #156]	@ (8001ea4 <HAL_TIM_PWM_Start+0x1b8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_PWM_Start+0x128>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <HAL_TIM_PWM_Start+0x1bc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_TIM_PWM_Start+0x12c>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_TIM_PWM_Start+0x12e>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2180      	movs	r1, #128	@ 0x80
 8001e2a:	0209      	lsls	r1, r1, #8
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a19      	ldr	r2, [pc, #100]	@ (8001e9c <HAL_TIM_PWM_Start+0x1b0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x162>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <HAL_TIM_PWM_Start+0x1c0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_TIM_PWM_Start+0x162>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <HAL_TIM_PWM_Start+0x1b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d116      	bne.n	8001e7c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_TIM_PWM_Start+0x1c4>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d016      	beq.n	8001e8e <HAL_TIM_PWM_Start+0x1a2>
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	025b      	lsls	r3, r3, #9
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d011      	beq.n	8001e8e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e008      	b.n	8001e8e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b004      	add	sp, #16
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			@ (mov r8, r8)
 8001e9c:	40012c00 	.word	0x40012c00
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	00010007 	.word	0x00010007

08001eb4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 ff62 	bl	8002d90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a37      	ldr	r2, [pc, #220]	@ (8001fb0 <HAL_TIM_PWM_Stop+0xfc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_TIM_PWM_Stop+0x40>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a36      	ldr	r2, [pc, #216]	@ (8001fb4 <HAL_TIM_PWM_Stop+0x100>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d009      	beq.n	8001ef4 <HAL_TIM_PWM_Stop+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a34      	ldr	r2, [pc, #208]	@ (8001fb8 <HAL_TIM_PWM_Stop+0x104>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_TIM_PWM_Stop+0x40>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a33      	ldr	r2, [pc, #204]	@ (8001fbc <HAL_TIM_PWM_Stop+0x108>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_TIM_PWM_Stop+0x44>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_TIM_PWM_Stop+0x46>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <HAL_TIM_PWM_Stop+0x10c>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	d10d      	bne.n	8001f26 <HAL_TIM_PWM_Stop+0x72>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	@ (8001fc4 <HAL_TIM_PWM_Stop+0x110>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_PWM_Stop+0x72>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4929      	ldr	r1, [pc, #164]	@ (8001fc8 <HAL_TIM_PWM_Stop+0x114>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <HAL_TIM_PWM_Stop+0x10c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d10d      	bne.n	8001f4e <HAL_TIM_PWM_Stop+0x9a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <HAL_TIM_PWM_Stop+0x110>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_PWM_Stop+0x9a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d104      	bne.n	8001f5e <HAL_TIM_PWM_Stop+0xaa>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	223e      	movs	r2, #62	@ 0x3e
 8001f58:	2101      	movs	r1, #1
 8001f5a:	5499      	strb	r1, [r3, r2]
 8001f5c:	e023      	b.n	8001fa6 <HAL_TIM_PWM_Stop+0xf2>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d104      	bne.n	8001f6e <HAL_TIM_PWM_Stop+0xba>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	223f      	movs	r2, #63	@ 0x3f
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]
 8001f6c:	e01b      	b.n	8001fa6 <HAL_TIM_PWM_Stop+0xf2>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d104      	bne.n	8001f7e <HAL_TIM_PWM_Stop+0xca>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	2101      	movs	r1, #1
 8001f7a:	5499      	strb	r1, [r3, r2]
 8001f7c:	e013      	b.n	8001fa6 <HAL_TIM_PWM_Stop+0xf2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d104      	bne.n	8001f8e <HAL_TIM_PWM_Stop+0xda>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2241      	movs	r2, #65	@ 0x41
 8001f88:	2101      	movs	r1, #1
 8001f8a:	5499      	strb	r1, [r3, r2]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_TIM_PWM_Stop+0xf2>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d104      	bne.n	8001f9e <HAL_TIM_PWM_Stop+0xea>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2242      	movs	r2, #66	@ 0x42
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]
 8001f9c:	e003      	b.n	8001fa6 <HAL_TIM_PWM_Stop+0xf2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2243      	movs	r2, #67	@ 0x43
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	40014400 	.word	0x40014400
 8001fbc:	40014800 	.word	0x40014800
 8001fc0:	00001111 	.word	0x00001111
 8001fc4:	00000444 	.word	0x00000444
 8001fc8:	ffff7fff 	.word	0xffff7fff

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d021      	beq.n	8002030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fac0 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 8002018:	e007      	b.n	800202a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fab3 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fabf 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2204      	movs	r2, #4
 800203c:	4013      	ands	r3, r2
 800203e:	d01e      	beq.n	800207e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2205      	movs	r2, #5
 8002046:	4252      	negs	r2, r2
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	23c0      	movs	r3, #192	@ 0xc0
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fa99 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 8002066:	e007      	b.n	8002078 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0018      	movs	r0, r3
 800206c:	f000 fa8c 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 fa98 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2208      	movs	r2, #8
 8002082:	4013      	ands	r3, r2
 8002084:	d021      	beq.n	80020ca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d01d      	beq.n	80020ca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2209      	movs	r2, #9
 8002094:	4252      	negs	r2, r2
 8002096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2204      	movs	r2, #4
 800209c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2203      	movs	r2, #3
 80020a6:	4013      	ands	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fa73 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fa66 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	0018      	movs	r0, r3
 80020c0:	f000 fa72 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2210      	movs	r2, #16
 80020ce:	4013      	ands	r3, r2
 80020d0:	d022      	beq.n	8002118 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2210      	movs	r2, #16
 80020d6:	4013      	ands	r3, r2
 80020d8:	d01e      	beq.n	8002118 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2211      	movs	r2, #17
 80020e0:	4252      	negs	r2, r2
 80020e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2208      	movs	r2, #8
 80020e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	23c0      	movs	r3, #192	@ 0xc0
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d004      	beq.n	8002102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 fa4c 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 8002100:	e007      	b.n	8002112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 fa3f 	bl	8002588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fa4b 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2201      	movs	r2, #1
 800211c:	4013      	ands	r3, r2
 800211e:	d00c      	beq.n	800213a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d008      	beq.n	800213a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2202      	movs	r2, #2
 800212e:	4252      	negs	r2, r2
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe f86f 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	4013      	ands	r3, r2
 8002140:	d104      	bne.n	800214c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	019b      	lsls	r3, r3, #6
 8002148:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800214a:	d00b      	beq.n	8002164 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	4013      	ands	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1e      	ldr	r2, [pc, #120]	@ (80021d4 <HAL_TIM_IRQHandler+0x208>)
 800215a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 feaa 	bl	8002eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d00b      	beq.n	8002186 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	4013      	ands	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_TIM_IRQHandler+0x20c>)
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f000 fea1 	bl	8002ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2240      	movs	r2, #64	@ 0x40
 800218a:	4013      	ands	r3, r2
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2240      	movs	r2, #64	@ 0x40
 8002192:	4013      	ands	r3, r2
 8002194:	d008      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2241      	movs	r2, #65	@ 0x41
 800219c:	4252      	negs	r2, r2
 800219e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 fa08 	bl	80025b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2220      	movs	r2, #32
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00c      	beq.n	80021ca <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	4013      	ands	r3, r2
 80021b6:	d008      	beq.n	80021ca <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2221      	movs	r2, #33	@ 0x21
 80021be:	4252      	negs	r2, r2
 80021c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fe6f 	bl	8002ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b004      	add	sp, #16
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	ffffdf7f 	.word	0xffffdf7f
 80021d8:	fffffeff 	.word	0xfffffeff

080021dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2317      	movs	r3, #23
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	223c      	movs	r2, #60	@ 0x3c
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0e5      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	223c      	movs	r2, #60	@ 0x3c
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b14      	cmp	r3, #20
 800220a:	d900      	bls.n	800220e <HAL_TIM_PWM_ConfigChannel+0x32>
 800220c:	e0d1      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002214:	18d3      	adds	r3, r2, r3
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	0011      	movs	r1, r2
 8002222:	0018      	movs	r0, r3
 8002224:	f000 fa54 	bl	80026d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2108      	movs	r1, #8
 8002234:	430a      	orrs	r2, r1
 8002236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2104      	movs	r1, #4
 8002244:	438a      	bics	r2, r1
 8002246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	619a      	str	r2, [r3, #24]
      break;
 800225a:	e0af      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fabd 	bl	80027e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	0109      	lsls	r1, r1, #4
 8002278:	430a      	orrs	r2, r1
 800227a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4954      	ldr	r1, [pc, #336]	@ (80023d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002288:	400a      	ands	r2, r1
 800228a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6999      	ldr	r1, [r3, #24]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	619a      	str	r2, [r3, #24]
      break;
 80022a0:	e08c      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	0011      	movs	r1, r2
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fb1e 	bl	80028ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2108      	movs	r1, #8
 80022bc:	430a      	orrs	r2, r1
 80022be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2104      	movs	r1, #4
 80022cc:	438a      	bics	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69d9      	ldr	r1, [r3, #28]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	61da      	str	r2, [r3, #28]
      break;
 80022e2:	e06b      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fb85 	bl	80029fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	0109      	lsls	r1, r1, #4
 8002300:	430a      	orrs	r2, r1
 8002302:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4932      	ldr	r1, [pc, #200]	@ (80023d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002310:	400a      	ands	r2, r1
 8002312:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69d9      	ldr	r1, [r3, #28]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	021a      	lsls	r2, r3, #8
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	61da      	str	r2, [r3, #28]
      break;
 8002328:	e048      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fbcc 	bl	8002ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2108      	movs	r1, #8
 8002344:	430a      	orrs	r2, r1
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2104      	movs	r1, #4
 8002354:	438a      	bics	r2, r1
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800236a:	e027      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fc0b 	bl	8002b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2180      	movs	r1, #128	@ 0x80
 8002386:	0109      	lsls	r1, r1, #4
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4910      	ldr	r1, [pc, #64]	@ (80023d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002398:	400a      	ands	r2, r1
 800239a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80023b0:	e004      	b.n	80023bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80023b2:	2317      	movs	r3, #23
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	223c      	movs	r2, #60	@ 0x3c
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

  return status;
 80023c4:	2317      	movs	r3, #23
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	781b      	ldrb	r3, [r3, #0]
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b006      	add	sp, #24
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	08002f88 	.word	0x08002f88
 80023d8:	fffffbff 	.word	0xfffffbff

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	230f      	movs	r3, #15
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	223c      	movs	r2, #60	@ 0x3c
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_TIM_ConfigClockSource+0x20>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0bc      	b.n	8002576 <HAL_TIM_ConfigClockSource+0x19a>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	223c      	movs	r2, #60	@ 0x3c
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	223d      	movs	r2, #61	@ 0x3d
 8002408:	2102      	movs	r1, #2
 800240a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4a5a      	ldr	r2, [pc, #360]	@ (8002580 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4a59      	ldr	r2, [pc, #356]	@ (8002584 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002420:	4013      	ands	r3, r2
 8002422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2280      	movs	r2, #128	@ 0x80
 8002432:	0192      	lsls	r2, r2, #6
 8002434:	4293      	cmp	r3, r2
 8002436:	d040      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xde>
 8002438:	2280      	movs	r2, #128	@ 0x80
 800243a:	0192      	lsls	r2, r2, #6
 800243c:	4293      	cmp	r3, r2
 800243e:	d900      	bls.n	8002442 <HAL_TIM_ConfigClockSource+0x66>
 8002440:	e088      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 8002442:	2280      	movs	r2, #128	@ 0x80
 8002444:	0152      	lsls	r2, r2, #5
 8002446:	4293      	cmp	r3, r2
 8002448:	d100      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x70>
 800244a:	e088      	b.n	800255e <HAL_TIM_ConfigClockSource+0x182>
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	0152      	lsls	r2, r2, #5
 8002450:	4293      	cmp	r3, r2
 8002452:	d900      	bls.n	8002456 <HAL_TIM_ConfigClockSource+0x7a>
 8002454:	e07e      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 8002456:	2b70      	cmp	r3, #112	@ 0x70
 8002458:	d018      	beq.n	800248c <HAL_TIM_ConfigClockSource+0xb0>
 800245a:	d900      	bls.n	800245e <HAL_TIM_ConfigClockSource+0x82>
 800245c:	e07a      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 800245e:	2b60      	cmp	r3, #96	@ 0x60
 8002460:	d04f      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x126>
 8002462:	d900      	bls.n	8002466 <HAL_TIM_ConfigClockSource+0x8a>
 8002464:	e076      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 8002466:	2b50      	cmp	r3, #80	@ 0x50
 8002468:	d03b      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0x106>
 800246a:	d900      	bls.n	800246e <HAL_TIM_ConfigClockSource+0x92>
 800246c:	e072      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d057      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x146>
 8002472:	d900      	bls.n	8002476 <HAL_TIM_ConfigClockSource+0x9a>
 8002474:	e06e      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 8002476:	2b30      	cmp	r3, #48	@ 0x30
 8002478:	d063      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x166>
 800247a:	d86b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d060      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x166>
 8002480:	d868      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d05d      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x166>
 8002486:	2b10      	cmp	r3, #16
 8002488:	d05b      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x166>
 800248a:	e063      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800249c:	f000 fc58 	bl	8002d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2277      	movs	r2, #119	@ 0x77
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e052      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ca:	f000 fc41 	bl	8002d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	01c9      	lsls	r1, r1, #7
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e03e      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	001a      	movs	r2, r3
 80024f0:	f000 fbb2 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	@ 0x50
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 fc0c 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 8002500:	e02e      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800250e:	001a      	movs	r2, r3
 8002510:	f000 fbd0 	bl	8002cb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	@ 0x60
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fbfc 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 8002520:	e01e      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	001a      	movs	r2, r3
 8002530:	f000 fb92 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	@ 0x40
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fbec 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 8002540:	e00e      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	0019      	movs	r1, r3
 800254c:	0010      	movs	r0, r2
 800254e:	f000 fbe3 	bl	8002d18 <TIM_ITRx_SetConfig>
      break;
 8002552:	e005      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002554:	230f      	movs	r3, #15
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
      break;
 800255c:	e000      	b.n	8002560 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800255e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223d      	movs	r2, #61	@ 0x3d
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

  return status;
 8002570:	230f      	movs	r3, #15
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	ffceff88 	.word	0xffceff88
 8002584:	ffff00ff 	.word	0xffff00ff

08002588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002590:	46c0      	nop			@ (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b002      	add	sp, #8
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a0:	46c0      	nop			@ (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			@ (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a36      	ldr	r2, [pc, #216]	@ (80026b4 <TIM_Base_SetConfig+0xec>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x20>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a35      	ldr	r2, [pc, #212]	@ (80026b8 <TIM_Base_SetConfig+0xf0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2270      	movs	r2, #112	@ 0x70
 80025ec:	4393      	bics	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2d      	ldr	r2, [pc, #180]	@ (80026b4 <TIM_Base_SetConfig+0xec>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2c      	ldr	r2, [pc, #176]	@ (80026b8 <TIM_Base_SetConfig+0xf0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2b      	ldr	r2, [pc, #172]	@ (80026bc <TIM_Base_SetConfig+0xf4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <TIM_Base_SetConfig+0xf8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x62>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a29      	ldr	r2, [pc, #164]	@ (80026c4 <TIM_Base_SetConfig+0xfc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a28      	ldr	r2, [pc, #160]	@ (80026c8 <TIM_Base_SetConfig+0x100>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a27      	ldr	r2, [pc, #156]	@ (80026cc <TIM_Base_SetConfig+0x104>)
 800262e:	4013      	ands	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2280      	movs	r2, #128	@ 0x80
 8002640:	4393      	bics	r3, r2
 8002642:	001a      	movs	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a13      	ldr	r2, [pc, #76]	@ (80026b4 <TIM_Base_SetConfig+0xec>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_Base_SetConfig+0xba>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <TIM_Base_SetConfig+0xf8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0xba>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <TIM_Base_SetConfig+0xfc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0xba>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a12      	ldr	r2, [pc, #72]	@ (80026c8 <TIM_Base_SetConfig+0x100>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d103      	bne.n	800268a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4393      	bics	r3, r2
 80026a4:	001a      	movs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]
  }
}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40002000 	.word	0x40002000
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800
 80026cc:	fffffcff 	.word	0xfffffcff

080026d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4393      	bics	r3, r2
 80026e8:	001a      	movs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a32      	ldr	r2, [pc, #200]	@ (80027c8 <TIM_OC1_SetConfig+0xf8>)
 80026fe:	4013      	ands	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2203      	movs	r2, #3
 8002706:	4393      	bics	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2202      	movs	r2, #2
 8002718:	4393      	bics	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <TIM_OC1_SetConfig+0xfc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <TIM_OC1_SetConfig+0x100>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <TIM_OC1_SetConfig+0x104>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_OC1_SetConfig+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a25      	ldr	r2, [pc, #148]	@ (80027d8 <TIM_OC1_SetConfig+0x108>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10c      	bne.n	8002760 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2208      	movs	r2, #8
 800274a:	4393      	bics	r3, r2
 800274c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2204      	movs	r2, #4
 800275c:	4393      	bics	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1a      	ldr	r2, [pc, #104]	@ (80027cc <TIM_OC1_SetConfig+0xfc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a19      	ldr	r2, [pc, #100]	@ (80027d0 <TIM_OC1_SetConfig+0x100>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a18      	ldr	r2, [pc, #96]	@ (80027d4 <TIM_OC1_SetConfig+0x104>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_OC1_SetConfig+0xb0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <TIM_OC1_SetConfig+0x108>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d111      	bne.n	80027a4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4a16      	ldr	r2, [pc, #88]	@ (80027dc <TIM_OC1_SetConfig+0x10c>)
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4a15      	ldr	r2, [pc, #84]	@ (80027e0 <TIM_OC1_SetConfig+0x110>)
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	621a      	str	r2, [r3, #32]
}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b006      	add	sp, #24
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	fffeff8f 	.word	0xfffeff8f
 80027cc:	40012c00 	.word	0x40012c00
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800
 80027dc:	fffffeff 	.word	0xfffffeff
 80027e0:	fffffdff 	.word	0xfffffdff

080027e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2210      	movs	r2, #16
 80027fa:	4393      	bics	r3, r2
 80027fc:	001a      	movs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a2e      	ldr	r2, [pc, #184]	@ (80028cc <TIM_OC2_SetConfig+0xe8>)
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a2d      	ldr	r2, [pc, #180]	@ (80028d0 <TIM_OC2_SetConfig+0xec>)
 800281a:	4013      	ands	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2220      	movs	r2, #32
 800282e:	4393      	bics	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a24      	ldr	r2, [pc, #144]	@ (80028d4 <TIM_OC2_SetConfig+0xf0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10d      	bne.n	8002862 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	4393      	bics	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	4393      	bics	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1b      	ldr	r2, [pc, #108]	@ (80028d4 <TIM_OC2_SetConfig+0xf0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00b      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <TIM_OC2_SetConfig+0xf4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a19      	ldr	r2, [pc, #100]	@ (80028dc <TIM_OC2_SetConfig+0xf8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <TIM_OC2_SetConfig+0x9e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <TIM_OC2_SetConfig+0xfc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d113      	bne.n	80028aa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a17      	ldr	r2, [pc, #92]	@ (80028e4 <TIM_OC2_SetConfig+0x100>)
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <TIM_OC2_SetConfig+0x104>)
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	621a      	str	r2, [r3, #32]
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b006      	add	sp, #24
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	feff8fff 	.word	0xfeff8fff
 80028d0:	fffffcff 	.word	0xfffffcff
 80028d4:	40012c00 	.word	0x40012c00
 80028d8:	40014000 	.word	0x40014000
 80028dc:	40014400 	.word	0x40014400
 80028e0:	40014800 	.word	0x40014800
 80028e4:	fffffbff 	.word	0xfffffbff
 80028e8:	fffff7ff 	.word	0xfffff7ff

080028ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a33      	ldr	r2, [pc, #204]	@ (80029d0 <TIM_OC3_SetConfig+0xe4>)
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a2f      	ldr	r2, [pc, #188]	@ (80029d4 <TIM_OC3_SetConfig+0xe8>)
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2203      	movs	r2, #3
 8002920:	4393      	bics	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a29      	ldr	r2, [pc, #164]	@ (80029d8 <TIM_OC3_SetConfig+0xec>)
 8002932:	4013      	ands	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <TIM_OC3_SetConfig+0xf0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10d      	bne.n	8002966 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4a24      	ldr	r2, [pc, #144]	@ (80029e0 <TIM_OC3_SetConfig+0xf4>)
 800294e:	4013      	ands	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4a20      	ldr	r2, [pc, #128]	@ (80029e4 <TIM_OC3_SetConfig+0xf8>)
 8002962:	4013      	ands	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <TIM_OC3_SetConfig+0xf0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <TIM_OC3_SetConfig+0xfc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <TIM_OC3_SetConfig+0x100>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_OC3_SetConfig+0x9a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <TIM_OC3_SetConfig+0x104>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d113      	bne.n	80029ae <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4a1a      	ldr	r2, [pc, #104]	@ (80029f4 <TIM_OC3_SetConfig+0x108>)
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <TIM_OC3_SetConfig+0x10c>)
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b006      	add	sp, #24
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	fffffeff 	.word	0xfffffeff
 80029d4:	fffeff8f 	.word	0xfffeff8f
 80029d8:	fffffdff 	.word	0xfffffdff
 80029dc:	40012c00 	.word	0x40012c00
 80029e0:	fffff7ff 	.word	0xfffff7ff
 80029e4:	fffffbff 	.word	0xfffffbff
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800
 80029f4:	ffffefff 	.word	0xffffefff
 80029f8:	ffffdfff 	.word	0xffffdfff

080029fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a26      	ldr	r2, [pc, #152]	@ (8002aac <TIM_OC4_SetConfig+0xb0>)
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <TIM_OC4_SetConfig+0xb4>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <TIM_OC4_SetConfig+0xb8>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab8 <TIM_OC4_SetConfig+0xbc>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	031b      	lsls	r3, r3, #12
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <TIM_OC4_SetConfig+0xc0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <TIM_OC4_SetConfig+0xc4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a17      	ldr	r2, [pc, #92]	@ (8002ac4 <TIM_OC4_SetConfig+0xc8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_OC4_SetConfig+0x78>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <TIM_OC4_SetConfig+0xcc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <TIM_OC4_SetConfig+0xd0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b006      	add	sp, #24
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	ffffefff 	.word	0xffffefff
 8002ab0:	feff8fff 	.word	0xfeff8fff
 8002ab4:	fffffcff 	.word	0xfffffcff
 8002ab8:	ffffdfff 	.word	0xffffdfff
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40014000 	.word	0x40014000
 8002ac4:	40014400 	.word	0x40014400
 8002ac8:	40014800 	.word	0x40014800
 8002acc:	ffffbfff 	.word	0xffffbfff

08002ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4a23      	ldr	r2, [pc, #140]	@ (8002b74 <TIM_OC5_SetConfig+0xa4>)
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <TIM_OC5_SetConfig+0xa8>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <TIM_OC5_SetConfig+0xac>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	041b      	lsls	r3, r3, #16
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	@ (8002b80 <TIM_OC5_SetConfig+0xb0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <TIM_OC5_SetConfig+0xb4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a15      	ldr	r2, [pc, #84]	@ (8002b88 <TIM_OC5_SetConfig+0xb8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_OC5_SetConfig+0x6e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a14      	ldr	r2, [pc, #80]	@ (8002b8c <TIM_OC5_SetConfig+0xbc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d109      	bne.n	8002b52 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <TIM_OC5_SetConfig+0xa4>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b006      	add	sp, #24
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	fffeffff 	.word	0xfffeffff
 8002b78:	fffeff8f 	.word	0xfffeff8f
 8002b7c:	fffdffff 	.word	0xfffdffff
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40014000 	.word	0x40014000
 8002b88:	40014400 	.word	0x40014400
 8002b8c:	40014800 	.word	0x40014800

08002b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <TIM_OC6_SetConfig+0xa8>)
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a20      	ldr	r2, [pc, #128]	@ (8002c3c <TIM_OC6_SetConfig+0xac>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <TIM_OC6_SetConfig+0xb0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	051b      	lsls	r3, r3, #20
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <TIM_OC6_SetConfig+0xb4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <TIM_OC6_SetConfig+0xb8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <TIM_OC6_SetConfig+0xbc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_OC6_SetConfig+0x70>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <TIM_OC6_SetConfig+0xc0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d109      	bne.n	8002c14 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <TIM_OC6_SetConfig+0xc4>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	621a      	str	r2, [r3, #32]
}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b006      	add	sp, #24
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	ffefffff 	.word	0xffefffff
 8002c3c:	feff8fff 	.word	0xfeff8fff
 8002c40:	ffdfffff 	.word	0xffdfffff
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40014000 	.word	0x40014000
 8002c4c:	40014400 	.word	0x40014400
 8002c50:	40014800 	.word	0x40014800
 8002c54:	fffbffff 	.word	0xfffbffff

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4393      	bics	r3, r2
 8002c72:	001a      	movs	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	22f0      	movs	r2, #240	@ 0xf0
 8002c82:	4393      	bics	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	220a      	movs	r2, #10
 8002c94:	4393      	bics	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	621a      	str	r2, [r3, #32]
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b006      	add	sp, #24
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	4393      	bics	r3, r2
 8002cce:	001a      	movs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <TIM_TI2_ConfigInputStage+0x60>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	22a0      	movs	r2, #160	@ 0xa0
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b006      	add	sp, #24
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	ffff0fff 	.word	0xffff0fff

08002d18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <TIM_ITRx_SetConfig+0x34>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	2207      	movs	r2, #7
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	ffcfff8f 	.word	0xffcfff8f

08002d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a09      	ldr	r2, [pc, #36]	@ (8002d8c <TIM_ETR_SetConfig+0x3c>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	021a      	lsls	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	ffff00ff 	.word	0xffff00ff

08002d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	221f      	movs	r2, #31
 8002da0:	4013      	ands	r3, r2
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	0013      	movs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	43d2      	mvns	r2, r2
 8002db2:	401a      	ands	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	211f      	movs	r1, #31
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4099      	lsls	r1, r3
 8002dc6:	000b      	movs	r3, r1
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b006      	add	sp, #24
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	223c      	movs	r2, #60	@ 0x3c
 8002de6:	5c9b      	ldrb	r3, [r3, r2]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e04f      	b.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	@ 0x3c
 8002df4:	2101      	movs	r1, #1
 8002df6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223d      	movs	r2, #61	@ 0x3d
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a20      	ldr	r2, [pc, #128]	@ (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d108      	bne.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2270      	movs	r2, #112	@ 0x70
 8002e30:	4393      	bics	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a13      	ldr	r2, [pc, #76]	@ (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a12      	ldr	r2, [pc, #72]	@ (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10c      	bne.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2280      	movs	r2, #128	@ 0x80
 8002e68:	4393      	bics	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223d      	movs	r2, #61	@ 0x3d
 8002e82:	2101      	movs	r1, #1
 8002e84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	223c      	movs	r2, #60	@ 0x3c
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b004      	add	sp, #16
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	ff0fffff 	.word	0xff0fffff
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40014000 	.word	0x40014000

08002ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <memset>:
 8002ed8:	0003      	movs	r3, r0
 8002eda:	1882      	adds	r2, r0, r2
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <memset+0xa>
 8002ee0:	4770      	bx	lr
 8002ee2:	7019      	strb	r1, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e7f9      	b.n	8002edc <memset+0x4>

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	2600      	movs	r6, #0
 8002eec:	4c0c      	ldr	r4, [pc, #48]	@ (8002f20 <__libc_init_array+0x38>)
 8002eee:	4d0d      	ldr	r5, [pc, #52]	@ (8002f24 <__libc_init_array+0x3c>)
 8002ef0:	1b64      	subs	r4, r4, r5
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	42a6      	cmp	r6, r4
 8002ef6:	d109      	bne.n	8002f0c <__libc_init_array+0x24>
 8002ef8:	2600      	movs	r6, #0
 8002efa:	f000 f819 	bl	8002f30 <_init>
 8002efe:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <__libc_init_array+0x40>)
 8002f00:	4d0a      	ldr	r5, [pc, #40]	@ (8002f2c <__libc_init_array+0x44>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	42a6      	cmp	r6, r4
 8002f08:	d105      	bne.n	8002f16 <__libc_init_array+0x2e>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	00b3      	lsls	r3, r6, #2
 8002f0e:	58eb      	ldr	r3, [r5, r3]
 8002f10:	4798      	blx	r3
 8002f12:	3601      	adds	r6, #1
 8002f14:	e7ee      	b.n	8002ef4 <__libc_init_array+0xc>
 8002f16:	00b3      	lsls	r3, r6, #2
 8002f18:	58eb      	ldr	r3, [r5, r3]
 8002f1a:	4798      	blx	r3
 8002f1c:	3601      	adds	r6, #1
 8002f1e:	e7f2      	b.n	8002f06 <__libc_init_array+0x1e>
 8002f20:	08002fdc 	.word	0x08002fdc
 8002f24:	08002fdc 	.word	0x08002fdc
 8002f28:	08002fe0 	.word	0x08002fe0
 8002f2c:	08002fdc 	.word	0x08002fdc

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr
